"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErgoAddress = void 0;
const common_1 = require("@fleet-sdk/common");
const common_2 = require("@fleet-sdk/common");
const blake2b_1 = require("@noble/hashes/blake2b");
const utils_1 = require("@noble/hashes/utils");
const base_1 = require("@scure/base");
const invalidAddress_1 = require("../errors/invalidAddress");
const CHECKSUM_LENGTH = 4;
const BLAKE_256_HASH_LENGTH = 32;
const P2PK_ERGOTREE_PREFIX = (0, utils_1.hexToBytes)("0008cd");
const P2PK_ERGOTREE_LENGTH = 36;
const P2SH_ERGOTREE_SUFFIX = (0, utils_1.hexToBytes)("d40801");
const P2SH_ERGOTREE_PREFIX = (0, utils_1.hexToBytes)("00ea02d193b4cbe4e3010e040004300e18");
const P2SH_ERGOTREE_LENGTH = 44;
const P2SH_HASH_LENGTH = 24;
function _getEncodedNetworkType(addressBytes) {
    return (0, common_2.first)(addressBytes) & 0xf0;
}
function _getEncodedAddressType(addressBytes) {
    return (0, common_2.first)(addressBytes) & 0xf;
}
function _ensureBytes(content) {
    if (typeof content === "string") {
        return (0, utils_1.hexToBytes)(content);
    }
    return content;
}
function blake2b256(input) {
    return (0, blake2b_1.blake2b)(input, { dkLen: BLAKE_256_HASH_LENGTH });
}
function _getErgoTreeType(ergoTree) {
    if (ergoTree.length === P2PK_ERGOTREE_LENGTH && (0, common_2.startsWith)(ergoTree, P2PK_ERGOTREE_PREFIX)) {
        return common_1.AddressType.P2PK;
    }
    else if (ergoTree.length === P2SH_ERGOTREE_LENGTH &&
        (0, common_2.startsWith)(ergoTree, P2SH_ERGOTREE_PREFIX) &&
        (0, common_2.endsWith)(ergoTree, P2SH_ERGOTREE_SUFFIX)) {
        return common_1.AddressType.P2SH;
    }
    else {
        return common_1.AddressType.P2S;
    }
}
/**
 * Ergo address model
 *
 * @example
 * Convert address to ErgoTree hex string
 * ```
 * const address = new Address("9eZ24iqjKywjzAti9RnWWTR3CiNnLJDAcd2MenKodcAfzc8AFTu");
 * console.log(address.ergoTree);
 * ```
 *
 * @example
 * Convert ErgoTree hex string to address string
 * ```
 * const ergoTree = "0008cd026dc059d64a50d0dbf07755c2c4a4e557e3df8afa7141868b3ab200643d437ee7"
 * const address = Address.fromErgoTree(ergoTree).toString();
 * ```
 */
class ErgoAddress {
    _ergoTree;
    _network;
    _type;
    get network() {
        return this._network;
    }
    /**
     * ErgoTree hex string
     */
    get ergoTree() {
        return (0, utils_1.bytesToHex)(this._ergoTree);
    }
    get type() {
        return this._type;
    }
    /**
     * New instance from ErgoTree bytes
     * @param ergoTree ErgoTree bytes
     */
    constructor(ergoTree, network) {
        this._ergoTree = ergoTree;
        this._network = network;
        this._type = _getErgoTreeType(ergoTree);
    }
    /**
     * Create a new instance from an ErgoTree
     * @param ergoTree ErgoTree hex string
     */
    static fromErgoTree(ergoTree, network) {
        return new ErgoAddress((0, utils_1.hexToBytes)(ergoTree), network);
    }
    /**
     * Create a new instance from a public key
     * @param publicKey Public key hex string
     */
    static fromPublicKey(publicKey, network) {
        const ergoTree = (0, utils_1.concatBytes)(P2PK_ERGOTREE_PREFIX, _ensureBytes(publicKey));
        return new ErgoAddress(ergoTree, network);
    }
    static fromHash(hash, network) {
        hash = _ensureBytes(hash);
        if (hash.length === BLAKE_256_HASH_LENGTH) {
            hash = hash.subarray(0, P2SH_HASH_LENGTH);
        }
        else if (hash.length != P2SH_HASH_LENGTH) {
            throw Error(`Invalid hash length: ${hash.length}`);
        }
        const ergoTree = (0, utils_1.concatBytes)(P2SH_ERGOTREE_PREFIX, hash, P2SH_ERGOTREE_SUFFIX);
        return new ErgoAddress(ergoTree, network);
    }
    /**
     * Create a new checked instance from an address string
     * @param encodedAddress Address encoded as base58
     */
    static fromBase58(encodedAddress, skipCheck = false) {
        const bytes = base_1.base58.decode(encodedAddress);
        if (!skipCheck && !ErgoAddress.validate(bytes)) {
            throw new invalidAddress_1.InvalidAddress(encodedAddress);
        }
        const network = _getEncodedNetworkType(bytes);
        const type = _getEncodedAddressType(bytes);
        const body = bytes.subarray(1, bytes.length - CHECKSUM_LENGTH);
        if (type === common_1.AddressType.P2PK) {
            return this.fromPublicKey(body, network);
        }
        else if (type === common_1.AddressType.P2SH) {
            return this.fromHash(body, network);
        }
        else {
            return new ErgoAddress(body, network);
        }
    }
    /**
     * Validate an address
     * @param address Address bytes or string
     */
    static validate(address) {
        const bytes = typeof address === "string" ? base_1.base58.decode(address) : address;
        if (bytes.length < CHECKSUM_LENGTH) {
            return false;
        }
        const script = bytes.subarray(0, bytes.length - CHECKSUM_LENGTH);
        const checksum = bytes.subarray(bytes.length - CHECKSUM_LENGTH, bytes.length);
        const blakeHash = blake2b256(script);
        const calculatedChecksum = blakeHash.subarray(0, CHECKSUM_LENGTH);
        return (0, common_2.areEqual)(calculatedChecksum, checksum);
    }
    static getNetworkType(address) {
        return _getEncodedNetworkType(base_1.base58.decode(address));
    }
    static getAddressType(address) {
        return _getEncodedAddressType(base_1.base58.decode(address));
    }
    getPublicKeys() {
        if (this.type === common_1.AddressType.P2PK) {
            return [this._ergoTree.subarray(P2PK_ERGOTREE_PREFIX.length)];
        }
        return [];
    }
    toP2SH(network) {
        if (this.type === common_1.AddressType.P2SH) {
            return this.encode();
        }
        const hash = blake2b256(this._ergoTree).subarray(0, P2SH_HASH_LENGTH);
        return this._encode(hash, common_1.AddressType.P2SH, network);
    }
    /**
     * Encode address as base58 string
     */
    encode(network) {
        let body;
        if (this.type === common_1.AddressType.P2PK) {
            body = (0, common_2.first)(this.getPublicKeys());
        }
        else if (this.type === common_1.AddressType.P2SH) {
            body = this._ergoTree.subarray(P2SH_ERGOTREE_PREFIX.length, P2SH_ERGOTREE_PREFIX.length + P2SH_HASH_LENGTH);
        }
        else {
            body = this._ergoTree;
        }
        return this._encode(body, this.type, network);
    }
    _encode(body, type, network) {
        if (!(0, common_2.isDefined)(network)) {
            if ((0, common_2.isDefined)(this.network)) {
                network = this.network;
            }
            else {
                network = common_1.Network.Mainnet;
            }
        }
        const head = Uint8Array.from([network + type]);
        body = (0, utils_1.concatBytes)(head, body);
        const checksum = blake2b256(body).subarray(0, CHECKSUM_LENGTH);
        return base_1.base58.encode((0, utils_1.concatBytes)(body, checksum));
    }
    /**
     * Encode address as base58 string
     */
    toString(network) {
        return this.encode(network);
    }
}
exports.ErgoAddress = ErgoAddress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJnb0FkZHJlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZWxzL2VyZ29BZGRyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUFrRjtBQUNsRiw4Q0FBcUY7QUFDckYsbURBQWdEO0FBQ2hELCtDQUEwRTtBQUMxRSxzQ0FBcUM7QUFDckMsNkRBQTBEO0FBRTFELE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQztBQUMxQixNQUFNLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztBQUVqQyxNQUFNLG9CQUFvQixHQUFHLElBQUEsa0JBQVUsRUFBQyxRQUFRLENBQUMsQ0FBQztBQUNsRCxNQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztBQUVoQyxNQUFNLG9CQUFvQixHQUFHLElBQUEsa0JBQVUsRUFBQyxRQUFRLENBQUMsQ0FBQztBQUNsRCxNQUFNLG9CQUFvQixHQUFHLElBQUEsa0JBQVUsRUFBQyxvQ0FBb0MsQ0FBQyxDQUFDO0FBQzlFLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0FBQ2hDLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBRTVCLFNBQVMsc0JBQXNCLENBQUMsWUFBd0I7SUFDdEQsT0FBTyxJQUFBLGNBQUssRUFBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDcEMsQ0FBQztBQUVELFNBQVMsc0JBQXNCLENBQUMsWUFBd0I7SUFDdEQsT0FBTyxJQUFBLGNBQUssRUFBQyxZQUFZLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDbkMsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLE9BQStCO0lBQ25ELElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO1FBQy9CLE9BQU8sSUFBQSxrQkFBVSxFQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzVCO0lBRUQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLEtBQWlCO0lBQ25DLE9BQU8sSUFBQSxpQkFB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