"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokensCollection = exports.MAX_TOKENS_PER_BOX = void 0;
const common_1 = require("@fleet-sdk/common");
const common_2 = require("@fleet-sdk/common");
const errors_1 = require("../../errors");
const insufficientTokenAmount_1 = require("../../errors/insufficientTokenAmount");
const maxTokensOverflow_1 = require("../../errors/maxTokensOverflow");
const collection_1 = require("./collection");
exports.MAX_TOKENS_PER_BOX = 120;
class TokensCollection extends collection_1.Collection {
    constructor(tokens, options) {
        super();
        if ((0, common_1.isDefined)(tokens)) {
            this.add(tokens, options);
        }
    }
    _map(token) {
        return { tokenId: token.tokenId, amount: (0, common_2.ensureBigInt)(token.amount) };
    }
    _addOne(token, options) {
        if ((0, common_1.isUndefined)(options) || (options.sum && !(0, common_1.isDefined)(options.index))) {
            if (this._sum(this._map(token))) {
                return this.length;
            }
        }
        if (this._items.length >= exports.MAX_TOKENS_PER_BOX) {
            throw new maxTokensOverflow_1.MaxTokensOverflow();
        }
        super._addOne(token, options);
        return this.length;
    }
    add(items, options) {
        return super.add(items, options);
    }
    _sum(token) {
        for (const t of this._items) {
            if (t.tokenId === token.tokenId) {
                t.amount += token.amount;
                return true;
            }
        }
        return false;
    }
    remove(tokenIdOrIndex, amount) {
        let index = -1;
        if (typeof tokenIdOrIndex === "number") {
            if (this._isIndexOutOfBounds(tokenIdOrIndex)) {
                throw new RangeError(`Index '${tokenIdOrIndex}' is out of range.`);
            }
            index = tokenIdOrIndex;
        }
        else {
            index = this._items.findIndex((token) => token.tokenId === tokenIdOrIndex);
            if (this._isIndexOutOfBounds(index)) {
                throw new errors_1.NotFoundError(`TokenId '${tokenIdOrIndex}' not found in assets collection.`);
            }
        }
        if (amount && index > -1) {
            const bigAmount = (0, common_2.ensureBigInt)(amount);
            const token = this._items[index];
            if (bigAmount > token.amount) {
                throw new insufficientTokenAmount_1.InsufficientTokenAmount(`Insufficient token amount to perform a subtraction operation.`);
            }
            else if (bigAmount < token.amount) {
                token.amount -= bigAmount;
                return this.length;
            }
        }
        if (index > -1) {
            this._items.splice(index, 1);
        }
        return this.length;
    }
    contains(tokenId) {
        return this._items.some((x) => x.tokenId === tokenId);
    }
}
exports.TokensCollection = TokensCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zQ29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY29sbGVjdGlvbnMvdG9rZW5zQ29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBb0c7QUFDcEcsOENBQWlEO0FBQ2pELHlDQUE2QztBQUM3QyxrRkFBK0U7QUFDL0Usc0VBQW1FO0FBQ25FLDZDQUFnRTtBQUVuRCxRQUFBLGtCQUFrQixHQUFHLEdBQUcsQ0FBQztBQUl0QyxNQUFhLGdCQUFpQixTQUFRLHVCQUFvRDtJQUt4RixZQUFZLE1BQXVDLEVBQUUsT0FBeUI7UUFDNUUsS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLElBQUEsa0JBQVMsRUFBQyxNQUFNLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUM7SUFFa0IsSUFBSSxDQUFDLEtBQWdEO1FBQ3RFLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBQSxxQkFBWSxFQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO0lBQ3hFLENBQUM7SUFFa0IsT0FBTyxDQUN4QixLQUFnRCxFQUNoRCxPQUF5QjtRQUV6QixJQUFJLElBQUEsb0JBQVcsRUFBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFBLGtCQUFTLEVBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDdEUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDL0IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO2FBQ3BCO1NBQ0Y7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLDBCQUFrQixF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