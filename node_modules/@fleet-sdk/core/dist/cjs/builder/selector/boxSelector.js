"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoxSelector = void 0;
const common_1 = require("@fleet-sdk/common");
const common_2 = require("@fleet-sdk/common");
const duplicateInputSelectionError_1 = require("../../errors/duplicateInputSelectionError");
const insufficientInputs_1 = require("../../errors/insufficientInputs");
const accumulativeSelectionStrategy_1 = require("./strategies/accumulativeSelectionStrategy");
const customSelectionStrategy_1 = require("./strategies/customSelectionStrategy");
class BoxSelector {
    _inputs;
    _strategy;
    _ensureFilterPredicate;
    _inputsSortSelector;
    _inputsSortDir;
    _ensureInclusionBoxIds;
    constructor(inputs) {
        this._inputs = inputs;
    }
    defineStrategy(strategy) {
        if (this._isISelectionStrategyImplementation(strategy)) {
            this._strategy = strategy;
        }
        else {
            this._strategy = new customSelectionStrategy_1.CustomSelectionStrategy(strategy);
        }
        return this;
    }
    select(target) {
        if (!this._strategy) {
            this._strategy = new accumulativeSelectionStrategy_1.AccumulativeSelectionStrategy();
        }
        const remaining = this._deepCloneTarget(target);
        let unselected = [...this._inputs];
        let selected = [];
        const predicate = this._ensureFilterPredicate;
        const inclusion = this._ensureInclusionBoxIds;
        if ((0, common_2.isDefined)(predicate)) {
            if ((0, common_2.isDefined)(inclusion)) {
                selected = unselected.filter((box) => predicate(box) || inclusion.has(box.boxId));
            }
            else {
                selected = unselected.filter(predicate);
            }
        }
        else if ((0, common_2.isDefined)(inclusion)) {
            selected = unselected.filter((box) => inclusion.has(box.boxId));
        }
        if ((0, common_2.isDefined)(selected)) {
            unselected = unselected.filter((box) => !selected.some((sel) => sel.boxId === box.boxId));
            if ((0, common_2.isDefined)(remaining.nanoErgs)) {
                remaining.nanoErgs -= (0, common_2.sumBy)(selected, (input) => input.value);
            }
            if ((0, common_2.isDefined)(remaining.tokens) && selected.some((input) => !(0, common_2.isEmpty)(input.assets))) {
                for (const tokenTarget of remaining.tokens) {
                    if (tokenTarget.amount) {
                        tokenTarget.amount -= (0, common_2.utxoSum)(selected, tokenTarget.tokenId);
                    }
                }
            }
        }
        unselected = this._sort(unselected);
        selected = selected.concat(this._strategy.select(unselected, remaining));
        if ((0, common_2.hasDuplicatesBy)(selected, (item) => item.boxId)) {
            throw new duplicateInputSelectionError_1.DuplicateInputSelectionError();
        }
        const unreached = this._getUnreachedTargets(selected, target);
        if (unreached.nanoErgs || (0, common_2.some)(unreached.tokens)) {
            throw new insufficientInputs_1.InsufficientInputs(unreached);
        }
        return selected;
    }
    _deepCloneTarget(target) {
        return {
            nanoErgs: target.nanoErgs,
            tokens: (0, common_2.isDefined)(target.tokens)
                ? target.tokens.map((t) => ({ tokenId: t.tokenId, amount: t.amount }))
                : undefined
        };
    }
    _getUnreachedTargets(inputs, target) {
        const unreached = { nanoErgs: undefined, tokens: undefined };
        const selectedNanoergs = (0, common_2.sumBy)(inputs, (input) => input.value);
        if (target.nanoErgs && target.nanoErgs > selectedNanoergs) {
            unreached.nanoErgs = target.nanoErgs - selectedNanoergs;
        }
        if ((0, common_2.isEmpty)(target.tokens)) {
            return unreached;
        }
        for (const tokenTarget of target.tokens) {
            const totalSelected = (0, common_2.utxoSum)(inputs, tokenTarget.tokenId);
            if ((0, common_2.isDefined)(tokenTarget.amount) && tokenTarget.amount > totalSelected) {
                if (tokenTarget.tokenId === (0, common_1.first)(inputs).boxId) {
                    continue;
                }
                if ((0, common_1.isUndefined)(unreached.tokens)) {
                    unreached.tokens = [];
                }
                unreached.tokens.push({
                    tokenId: tokenTarget.tokenId,
                    amount: tokenTarget.amount - totalSelected
                });
            }
        }
        return unreached;
    }
    _sort(inputs) {
        if (!this._inputsSortSelector) {
            return (0, common_2.orderBy)(inputs, (input) => input.creationHeight, "asc");
        }
        return (0, common_2.orderBy)(inputs, this._inputsSortSelector, this._inputsSortDir || "asc");
    }
    ensureInclusion(predicateOrBoxIds) {
        if (typeof predicateOrBoxIds === "function") {
            this._ensureFilterPredicate = predicateOrBoxIds;
        }
        else {
            if ((0, common_1.isUndefined)(this._ensureInclusionBoxIds)) {
                this._ensureInclusionBoxIds = new Set();
            }
            if (Array.isArray(predicateOrBoxIds)) {
                for (const boxId of predicateOrBoxIds) {
                    this._ensureInclusionBoxIds.add(boxId);
                }
            }
            else {
                this._ensureInclusionBoxIds.add(predicateOrBoxIds);
            }
        }
        return this;
    }
    orderBy(selector, direction) {
        this._inputsSortSelector = selector;
        this._inputsSortDir = direction;
        return this;
    }
    _isISelectionStrategyImplementation(obj) {
        if (obj.select) {
            return true;
        }
        return false;
    }
    static buildTargetFrom(boxes) {
        const tokens = {};
        let nanoErgs = common_2._0n;
        for (const box of boxes) {
            nanoErgs += (0, common_2.ensureBigInt)(box.value);
            for (const token of box.assets) {
                tokens[token.tokenId] = (tokens[token.tokenId] || common_2._0n) + (0, common_2.ensureBigInt)(token.amount);
            }
        }
        return {
            nanoErgs,
            tokens: Object.keys(tokens).map((tokenId) => ({ tokenId, amount: tokens[tokenId] }))
        };
    }
}
exports.BoxSelector = BoxSelector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm94U2VsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYnVpbGRlci9zZWxlY3Rvci9ib3hTZWxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FZMkI7QUFDM0IsOENBVTJCO0FBQzNCLDRGQUF5RjtBQUN6Rix3RUFBcUU7QUFFckUsOEZBQTJGO0FBQzNGLGtGQUFpRztBQUlqRyxNQUFhLFdBQVc7SUFDTCxPQUFPLENBQWdCO0lBQ2hDLFNBQVMsQ0FBc0I7SUFDL0Isc0JBQXNCLENBQWdDO0lBQ3RELG1CQUFtQixDQUFnQztJQUNuRCxjQUFjLENBQW9CO0lBQ2xDLHNCQUFzQixDQUFjO0lBRTVDLFlBQVksTUFBVztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN4QixDQUFDO0lBRU0sY0FBYyxDQUFDLFFBQStDO1FBQ25FLElBQUksSUFBSSxDQUFDLG1DQUFtQyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3RELElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1NBQzNCO2FBQU07WUFDTCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksaURBQXVCLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDeEQ7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxNQUFNLENBQUMsTUFBdUI7UUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLDZEQUE2QixFQUFFLENBQUM7U0FDdEQ7UUFFRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEQsSUFBSSxVQUFVLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuQyxJQUFJLFFBQVEsR0FBa0IsRUFBRSxDQUFDO1FBRWpDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxz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