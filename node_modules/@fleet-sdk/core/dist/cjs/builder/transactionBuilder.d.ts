import { Amount, Base58String, Box, BuildOutputType, EIP12UnsignedTransaction, HexString, OneOrMore, TokenAmount, UnsignedTransaction } from "@fleet-sdk/common";
import { ErgoAddress, InputsCollection, OutputsCollection, TokensCollection } from "../models";
import { CollectionAddOptions } from "../models/collections/collection";
import { OutputBuilder } from "./outputBuilder";
import { FleetPluginContext } from "./pluginContext";
import { BoxSelector } from "./selector";
import { TransactionBuilderSettings } from "./transactionBuilderSettings";
type TransactionType<T> = T extends "default" ? UnsignedTransaction : EIP12UnsignedTransaction;
type SelectorSettings = Omit<BoxSelector<Box<bigint>>, "select">;
export type SelectorCallback = (selector: SelectorSettings) => void;
export type FleetPlugin = (context: FleetPluginContext) => void;
export declare const RECOMMENDED_MIN_FEE_VALUE: bigint;
export declare const FEE_CONTRACT = "1005040004000e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304";
type EjectorContext = {
    inputs: InputsCollection;
    dataInputs: InputsCollection;
    outputs: OutputsCollection;
    burning: TokensCollection | undefined;
    settings: TransactionBuilderSettings;
    selection: (selectorCallBack: SelectorCallback) => void;
};
export declare class TransactionBuilder {
    private readonly _inputs;
    private readonly _dataInputs;
    private readonly _outputs;
    private readonly _settings;
    private readonly _creationHeight;
    private _selectorCallbacks?;
    private _changeAddress?;
    private _feeAmount?;
    private _burning?;
    private _plugins?;
    constructor(creationHeight: number);
    get inputs(): InputsCollection;
    get dataInputs(): InputsCollection;
    get outputs(): OutputsCollection;
    get changeAddress(): ErgoAddress | undefined;
    get fee(): bigint | undefined;
    get burning(): TokensCollection | undefined;
    get settings(): TransactionBuilderSettings;
    get creationHeight(): number;
    /**
     * Syntax sugar to be used in composition with another methods
     *
     * @example
     * ```
     * new TransactionBuilder(height)
     *   .from(inputs)
     *   .and.from(otherInputs);
     * ```
     */
    get and(): TransactionBuilder;
    from(inputs: OneOrMore<Box<Amount>>): TransactionBuilder;
    to(outputs: OneOrMore<OutputBuilder>, options?: CollectionAddOptions): TransactionBuilder;
    withDataFrom(dataInputs: OneOrMore<Box<Amount>>, options?: CollectionAddOptions): TransactionBuilder;
    sendChangeTo(address: ErgoAddress | Base58String | HexString): TransactionBuilder;
    payFee(amount: Amount): TransactionBuilder;
    payMinFee(): TransactionBuilder;
    burnTokens(tokens: OneOrMore<TokenAmount<Amount>>): TransactionBuilder;
    configure(callback: (settings: TransactionBuilderSettings) => void): TransactionBuilder;
    configureSelector(selectorCallback: SelectorCallback): TransactionBuilder;
    extend(plugins: FleetPlugin): TransactionBuilder;
    eject(ejector: (context: EjectorContext) => void): TransactionBuilder;
    build(): UnsignedTransaction;
    build<T extends BuildOutputType>(buildOutputType: T): TransactionType<T>;
    private _isMinting;
    private _isMoreThanOneTokenBeingMinted;
    private _isTheSameTokenBeingMintedOutsideTheMintingBox;
    private _getMintingTokenId;
    private _calcBurningBalance;
    private _calcChangeLength;
    private _calcRequiredNanoErgsForChange;
    private _calcDiff;
}
export {};
