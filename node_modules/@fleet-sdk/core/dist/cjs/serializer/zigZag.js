"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zigZagDecodeBigInt = exports.zigZagEncodeBigInt = exports.zigZagDecode = exports.zigZagEncode = void 0;
const common_1 = require("@fleet-sdk/common");
/**
 * ZigZag encoding maps signed integers to unsigned integers so that numbers
 * with a small absolute value (for instance, -1) have a small variant encoded
 * value too. It does this in a way that "zig-zags" back and forth through the
 * positive and negative integers, so that -1 is encoded as 1, 1 is encoded as 2,
 * -2 is encoded as 3, and so on.
 * @see https://developers.google.com/protocol-buffers/docs/encoding#types
 */
/**
 * Encode a signed integer.
 * @param input Signed integer
 * @returns ZigZag-encoded value
 */
function zigZagEncode(input) {
    return (input << 1) ^ (input >> 63);
}
exports.zigZagEncode = zigZagEncode;
/**
 * Decode a ZigZag-encoded value.
 * @param input ZigZag-encoded value
 * @returns Signed integer
 */
function zigZagDecode(input) {
    return (input >> 1) ^ -(input & 1);
}
exports.zigZagDecode = zigZagDecode;
/**
 * Encode a signed big integer.
 * @param input Signed big integer
 * @returns ZigZag-encoded value
 */
function zigZagEncodeBigInt(input) {
    return (input << common_1._1n) ^ (input >> common_1._63n);
}
exports.zigZagEncodeBigInt = zigZagEncodeBigInt;
/**
 * Decode a ZigZag-encoded value.
 * @param input ZigZag-encoded value
 * @returns Signed big integer
 */
function zigZagDecodeBigInt(input) {
    return (input >> common_1._1n) ^ -(input & common_1._1n);
}
exports.zigZagDecodeBigInt = zigZagDecodeBigInt;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiemlnWmFnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcmlhbGl6ZXIvemlnWmFnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUU5Qzs7Ozs7OztHQU9HO0FBRUg7Ozs7R0FJRztBQUNILFNBQWdCLFlBQVksQ0FBQyxLQUFhO0lBQ3hDLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUZELG9DQUVDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLFlBQVksQ0FBQyxLQUFhO0lBQ3hDLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBRkQsb0NBRUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0Isa0JBQWtCLENBQUMsS0FBYTtJQUM5QyxPQUFPLENBQUMsS0FBSyxJQUFJLFlBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLGFBQUksQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFGRCxnREFFQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixrQkFBa0IsQ0FBQyxLQUFhO0lBQzlDLE9BQU8sQ0FBQyxLQUFLLElBQUksWUFBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxZQUFHLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBRkQsZ0RBRUMifQ==