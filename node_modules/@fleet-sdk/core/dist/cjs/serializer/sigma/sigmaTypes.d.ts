import { SigmaTypeCode } from "./sigmaTypeCode";
export interface ISigmaType {
    readonly type: SigmaTypeCode;
}
export interface IPrimitiveSigmaType<T> extends ISigmaType {
    value: T;
}
export interface ISigmaCollection<T> extends ISigmaType {
    value: ArrayLike<T>;
    elementsType: SigmaTypeCode;
}
export declare function SByte(value: number): IPrimitiveSigmaType<number>;
export declare function SByte(): SigmaTypeCode;
export declare function SBool(value: boolean): IPrimitiveSigmaType<boolean>;
export declare function SBool(): SigmaTypeCode;
export declare function SShort(value: number): IPrimitiveSigmaType<number>;
export declare function SShort(): SigmaTypeCode;
export declare function SInt(value: number): IPrimitiveSigmaType<number>;
export declare function SInt(): SigmaTypeCode;
export declare function SLong(value: number | string | bigint): IPrimitiveSigmaType<bigint>;
export declare function SLong(): SigmaTypeCode;
export declare function SBigInt(value: string | bigint): IPrimitiveSigmaType<bigint>;
export declare function SBigInt(): SigmaTypeCode;
export declare function SUnit(): IPrimitiveSigmaType<null>;
export declare function SUnit(): SigmaTypeCode;
export declare function SGroupElement(value: Uint8Array): IPrimitiveSigmaType<Uint8Array>;
export declare function SGroupElement(): SigmaTypeCode;
export declare function SSigmaProp(value: IPrimitiveSigmaType<Uint8Array>): IPrimitiveSigmaType<ISigmaType>;
export declare function SSigmaProp(): SigmaTypeCode;
export declare function SColl<T>(type: () => SigmaTypeCode, elements: ArrayLike<T>): ISigmaCollection<T>;
