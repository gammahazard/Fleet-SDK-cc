"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SigmaByteWriter = void 0;
const common_1 = require("@fleet-sdk/common");
const utils_1 = require("@noble/hashes/utils");
const vlq_1 = require("../vlq");
const zigZag_1 = require("../zigZag");
class SigmaByteWriter {
    _bytes;
    _cursor;
    get length() {
        return this._cursor;
    }
    constructor(maxLength) {
        this._bytes = new Uint8Array(maxLength);
        this._cursor = 0;
    }
    writeBoolean(value) {
        this.write(value === true ? 0x01 : 0x00);
        return this;
    }
    writeBooleans(elements) {
        for (let i = 0; i < elements.length; i++) {
            this.writeBoolean(elements[i]);
        }
        return this;
    }
    writeNumber(value) {
        this.writeBytes((0, vlq_1.vlqEncode)((0, zigZag_1.zigZagEncode)(value)));
        return this;
    }
    writeLong(value) {
        this.writeBytes((0, vlq_1.vqlEncodeBigInt)((0, zigZag_1.zigZagEncodeBigInt)(value)));
        return this;
    }
    write(byte) {
        this._bytes[this._cursor++] = byte;
        return this;
    }
    writeBytes(bytes) {
        this._bytes.set(bytes, this._cursor);
        this._cursor += bytes.length;
        return this;
    }
    writeHex(hex) {
        if (hex.length % 2) {
            throw new Error("Invalid hex padding");
        }
        for (let i = 0; i < hex.length / 2; i++) {
            const j = i * 2;
            const byte = Number.parseInt(hex.slice(j, j + 2), 16);
            if (Number.isNaN(byte) || byte < 0) {
                throw new Error("Invalid byte sequence");
            }
            this.write(byte);
        }
        return this;
    }
    writeBits(bits) {
        let bitOffset = 0;
        for (let i = 0; i < bits.length; i++) {
            if (bits[i]) {
                this._bytes[this._cursor] |= 1 << bitOffset++;
            }
            else {
                this._bytes[this._cursor] &= ~(1 << bitOffset++);
            }
            if (bitOffset == 8) {
                bitOffset = 0;
                this._cursor++;
            }
        }
        if (bitOffset > 0) {
            this._cursor++;
        }
        return this;
    }
    writeBigInt(number) {
        // todo: take a look at https://coolaj86.com/articles/convert-decimal-to-hex-with-js-bigints/
        // and https://coolaj86.com/articles/convert-hex-to-decimal-with-js-bigints/
        if (number < common_1._0n) {
            throw new Error("Negative BigInt values are not supported Fleet serializer.");
        }
        let hex = number.toString(16);
        if (hex.length % 2) {
            hex = "0" + hex;
        }
        else if (Number.parseInt(hex.substring(0, 1), 16) >= 8) {
            // maximum positive need to prepend 0 otherwise results in negative number
            hex = "00" + hex;
        }
        this.writeBytes((0, vlq_1.vlqEncode)(hex.length / 2));
        this.writeHex(hex);
        return this;
    }
    toHex() {
        return (0, utils_1.bytesToHex)(this._bytes.subarray(0, this._cursor));
    }
    toBytes() {
        return this._bytes.subarray(0, this._cursor);
    }
}
exports.SigmaByteWriter = SigmaByteWriter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbWFCeXRlV3JpdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NlcmlhbGl6ZXIvc2lnbWEvc2lnbWFCeXRlV3JpdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUF3QztBQUN4QywrQ0FBaUQ7QUFDakQsZ0NBQW9EO0FBQ3BELHNDQUE2RDtBQUU3RCxNQUFhLGVBQWU7SUFDbEIsTUFBTSxDQUFjO0lBQ3BCLE9BQU8sQ0FBVTtJQUV6QixJQUFXLE1BQU07UUFDZixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELFlBQVksU0FBaUI7UUFDM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRU0sWUFBWSxDQUFDLEtBQWM7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXpDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLGFBQWEsQ0FBQyxRQUFtQjtRQUN0QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2hDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sV0FBVyxDQUFDLEtBQWE7UUFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFBLGVBQVMsRUFBQyxJQUFBLHFCQUFZLEVBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWhELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFNB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