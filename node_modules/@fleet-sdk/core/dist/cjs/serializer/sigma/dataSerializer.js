"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataSerializer = void 0;
const utils_1 = require("@noble/hashes/utils");
const vlq_1 = require("../vlq");
const sigmaTypeCode_1 = require("./sigmaTypeCode");
const utils_2 = require("./utils");
class DataSerializer {
    static serialize(data, buffer) {
        if ((0, utils_2.isPrimitiveType)(data)) {
            switch (data.type) {
                case sigmaTypeCode_1.SigmaTypeCode.Boolean:
                    buffer.writeBoolean(data.value);
                    break;
                case sigmaTypeCode_1.SigmaTypeCode.Byte:
                    buffer.write(data.value);
                    break;
                case sigmaTypeCode_1.SigmaTypeCode.Short:
                case sigmaTypeCode_1.SigmaTypeCode.Int:
                    buffer.writeNumber(data.value);
                    break;
                case sigmaTypeCode_1.SigmaTypeCode.Long:
                    buffer.writeLong(data.value);
                    break;
                case sigmaTypeCode_1.SigmaTypeCode.BigInt: {
                    buffer.writeBigInt(data.value);
                    break;
                }
                case sigmaTypeCode_1.SigmaTypeCode.GroupElement:
                    buffer.writeBytes(data.value);
                    break;
                case sigmaTypeCode_1.SigmaTypeCode.SigmaProp: {
                    const node = data.value;
                    if (node.type === sigmaTypeCode_1.SigmaTypeCode.GroupElement) {
                        buffer.write(0xcd); // CreateProveDlog operation
                        DataSerializer.serialize(node, buffer);
                    }
                    else {
                        throw Error("Not implemented");
                    }
                    break;
                }
                case sigmaTypeCode_1.SigmaTypeCode.Unit: // same as void, don't need to save anything
                    break;
                // case SigmaTypeCode.Box:
                default:
                    throw Error("Not implemented");
            }
        }
        else if ((0, utils_2.isColl)(data)) {
            if (typeof data.value === "string") {
                buffer.writeBytes((0, vlq_1.vlqEncode)(data.value.length / 2));
            }
            else {
                buffer.writeBytes((0, vlq_1.vlqEncode)(data.value.length));
            }
            switch (data.elementsType) {
                case sigmaTypeCode_1.SigmaTypeCode.Boolean:
                    buffer.writeBits(data.value);
                    break;
                case sigmaTypeCode_1.SigmaTypeCode.Byte: {
                    let bytes;
                    if (typeof data.value === "string") {
                        bytes = (0, utils_1.hexToBytes)(data.value);
                    }
                    else {
                        bytes = Uint8Array.from(data.value);
                    }
                    buffer.writeBytes(bytes);
                    break;
                }
                default:
                    for (let i = 0; i < data.value.length; i++) {
                        DataSerializer.serialize({ value: data.value[i], type: data.elementsType }, buffer);
                    }
            }
        }
        else {
            throw Error("Not implemented");
        }
    }
    static deserialize(typeCode, reader) {
        if ((0, utils_2.isPrimitiveTypeCode)(typeCode)) {
            switch (typeCode) {
                case sigmaTypeCode_1.SigmaTypeCode.Boolean:
                    return reader.readBoolean();
                case sigmaTypeCode_1.SigmaTypeCode.Byte:
                    return reader.readByte();
                case sigmaTypeCode_1.SigmaTypeCode.Short:
                case sigmaTypeCode_1.SigmaTypeCode.Int:
                    return reader.readNumber();
                case sigmaTypeCode_1.SigmaTypeCode.Long:
                    return reader.readLong();
                // case SigmaTypeCode.BigInt:
                // case SigmaTypeCode.GroupElement:
                // case SigmaTypeCode.SigmaProp:
                // case SigmaTypeCode.Unit:
                // case SigmaTypeCode.Box:
                // default:
                //   break;
            }
        }
        throw new Error("Type parsing not yet implemented.");
    }
}
exports.DataSerializer = DataSerializer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YVNlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2VyaWFsaXplci9zaWdtYS9kYXRhU2VyaWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBaUQ7QUFDakQsZ0NBQW1DO0FBR25DLG1EQUFnRDtBQUVoRCxtQ0FBdUU7QUFFdkUsTUFBYSxjQUFjO0lBQ2xCLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBZ0IsRUFBRSxNQUF1QjtRQUMvRCxJQUFJLElBQUEsdUJBQWUsRUFBQyxJQUFJLENBQUMsRUFBRTtZQUN6QixRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ2pCLEtBQUssNkJBQWEsQ0FBQyxPQUFPO29CQUN4QixNQUFNLENBQUMsWUFBWSxDQUFFLElBQXFDLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ2xFLE1BQU07Z0JBQ1IsS0FBSyw2QkFBYSxDQUFDLElBQUk7b0JBQ3JCLE1BQU0sQ0FBQyxLQUFLLENBQUUsSUFBb0MsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDMUQsTUFBTTtnQkFDUixLQUFLLDZCQUFhLENBQUMsS0FBSyxDQUFDO2dCQUN6QixLQUFLLDZCQUFhLENBQUMsR0FBRztvQkFDcEIsTUFBTSxDQUFDLFdBQVcsQ0FBRSxJQUFvQyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNoRSxNQUFNO2dCQUNSLEtBQUssNkJBQWEsQ0FBQyxJQUFJO29CQUNyQixNQUFNLENBQUMsU0FBUyxDQUFFLElBQW9DLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQzlELE1BQU07Z0JBQ1IsS0FBSyw2QkFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN6QixNQUFNLENBQUMsV0FBVyxDQUFFLElBQW9DLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ2hFLE1BQU07aUJBQ1A7Z0JBQ0QsS0FBSyw2QkFBYSxDQUFDLFlBQVk7b0JBQzdCLE1BQU0sQ0FBQyxVQUFVLENBQUUsSUFBd0Ms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