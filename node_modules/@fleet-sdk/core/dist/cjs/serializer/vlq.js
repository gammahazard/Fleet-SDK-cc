"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.vlqDecodeBigInt = exports.vqlEncodeBigInt = exports.vlqDecode = exports.vlqEncode = void 0;
const common_1 = require("@fleet-sdk/common");
/**
 * A **variable-length quantity (VLQ)** is a universal code that uses an arbitrary number
 * of binary octets (eight-bit bytes) to represent an arbitrarily large integer. A VLQ
 * is essentially a base-128 representation of an unsigned integer with the addition of
 * the eighth bit to mark continuation of bytes. VLQ is identical to LEB128 except in
 * endianness. See the example below.
 */
/**
 * Decode VLQ bytes to an unsigned integer value
 * @param reader VLQ bytes
 * @returns Unsigned integer value
 */
function vlqEncode(value) {
    // source: https://stackoverflow.com/a/3564685
    if (value === 0) {
        return Uint8Array.from([0]);
    }
    else if (value < 0) {
        throw new RangeError("Variable Length Quantity not supported for negative numbers");
    }
    const bytes = [];
    do {
        let lower7bits = value & 0x7f;
        value >>= 7;
        if (value > 0) {
            lower7bits |= 0x80;
        }
        bytes.push(lower7bits);
    } while (value > 0);
    return Uint8Array.from(bytes);
}
exports.vlqEncode = vlqEncode;
/**
 * Decode VLQ bytes to an unsigned integer value
 * @param reader VLQ bytes
 * @returns Unsigned integer value
 */
function vlqDecode(reader) {
    if (reader.isEmpty) {
        return 0;
    }
    let value = 0;
    let shift = 0;
    let lower7bits = 0;
    do {
        lower7bits = reader.readByte();
        value |= (lower7bits & 0x7f) << shift;
        shift += 7;
    } while ((lower7bits & 0x80) != 0);
    return value;
}
exports.vlqDecode = vlqDecode;
/**
 * Encode a unsigned big integer to VLQ bytes
 * @param value unsigned bit integer
 * @returns VLQ bytes
 */
function vqlEncodeBigInt(value) {
    // source: https://stackoverflow.com/a/3564685
    if (value === common_1._0n) {
        return Uint8Array.from([0]);
    }
    else if (value < common_1._0n) {
        throw new RangeError("Variable Length Quantity not supported for negative numbers");
    }
    const bytes = [];
    do {
        let lower7bits = Number(value & common_1._127n);
        value >>= common_1._7n;
        if (value > 0) {
            lower7bits |= 0x80;
        }
        bytes.push(lower7bits);
    } while (value > 0);
    return Uint8Array.from(bytes);
}
exports.vqlEncodeBigInt = vqlEncodeBigInt;
/**
 * Decode VLQ bytes to an unsigned big integer value
 * @param reader VLQ bytes
 * @returns Unsigned integer value
 */
function vlqDecodeBigInt(reader) {
    if (reader.isEmpty) {
        return common_1._0n;
    }
    let value = common_1._0n;
    let shift = common_1._0n;
    let lower7bits = common_1._0n;
    do {
        lower7bits = BigInt(reader.readByte());
        value |= (lower7bits & common_1._127n) << shift;
        shift += common_1._7n;
    } while ((lower7bits & common_1._128n) != common_1._0n);
    return value;
}
exports.vlqDecodeBigInt = vlqDecodeBigInt;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmxxLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcmlhbGl6ZXIvdmxxLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUEyRDtBQUczRDs7Ozs7O0dBTUc7QUFFSDs7OztHQUlHO0FBQ0gsU0FBZ0IsU0FBUyxDQUFDLEtBQWE7SUFDckMsOENBQThDO0lBRTlDLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtRQUNmLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDN0I7U0FBTSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7UUFDcEIsTUFBTSxJQUFJLFVBQVUsQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO0tBQ3JGO0lBRUQsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLEdBQUc7UUFDRCxJQUFJLFVBQVUsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQzlCLEtBQUssS0FBSyxDQUFDLENBQUM7UUFFWixJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDYixVQUFVLElBQUksSUFBSSxDQUFDO1NBQ3BCO1FBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUN4QixRQUFRLEtBQUssR0FBRyxDQUFDLEVBQUU7SUFFcEIsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUF0QkQsOEJBc0JDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLFNBQVMsQ0FBQyxNQUF1QjtJQUMvQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxDQUFDLENBQUM7S0FDVjtJQUVELElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztJQUVuQixHQUFHO1FBQ0QsVUFBVSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMvQixLQUFLLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDO1FBQ3RDLEtBQUssSUFBSSxDQUFDLENBQUM7S0FDWixRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUVuQyxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFoQkQsOEJBZ0JDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLGVBQWUsQ0FBQyxLQUFhO0lBQzNDLDhDQUE4QztJQUU5QyxJQUFJLEtBQUssS0FBSyxZQUFHLEVBQUU7UUFDakIsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM3QjtTQUFNLElBQUksS0FBSyxHQUFHLFlBQUcsRUFBRTtRQUN0QixNQUFNLElBQUksVUFBVSxDQUFDLDZEQUE2RCxDQUFDLENBQUM7S0FDckY7SUFFRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDakIsR0FBRztRQUNELElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEdBQUcsY0FBSyxDQUFDLENBQUM7UUFDdkMsS0FBSyxLQUFLLFlBQUcsQ0FBQztRQUVkLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtZQUNiLFVBQVUsSUFBSSxJQUFJLENBQUM7U0FDcEI7UUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3hCLFFBQVEsS0FBSyxHQUFHLENBQUMsRUFBRTtJQUVwQixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQXRCRCwwQ0FzQkM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0IsZUFBZSxDQUFDLE1BQXVCO0lBQ3JELElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtRQUNsQixPQUFPLFlBQUcsQ0FBQztLQUNaO0lBRUQsSUFBSSxLQUFLLEdBQUcsWUFBRyxDQUFDO0lBQ2hCLElBQUksS0FBSyxHQUFHLFlBQUcsQ0FBQztJQUNoQixJQUFJLFVBQVUsR0FBRyxZQUFHLENBQUM7SUFFckIsR0FBRztRQUNELFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDdkMsS0FBSyxJQUFJLENBQUMsVUFBVSxHQUFHLGNBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQztRQUN2QyxLQUFLLElBQUksWUFBRyxDQUFDO0tBQ2QsUUFBUSxDQUFDLFVBQVUsR0FBRyxjQUFLLENBQUMsSUFBSSxZQUFHLEVBQUU7SUFFdEMsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBaEJELDBDQWdCQyJ9