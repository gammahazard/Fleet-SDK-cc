import { AddressType, Base58String, HexString, Network } from "@fleet-sdk/common";
/**
 * Ergo address model
 *
 * @example
 * Convert address to ErgoTree hex string
 * ```
 * const address = new Address("9eZ24iqjKywjzAti9RnWWTR3CiNnLJDAcd2MenKodcAfzc8AFTu");
 * console.log(address.ergoTree);
 * ```
 *
 * @example
 * Convert ErgoTree hex string to address string
 * ```
 * const ergoTree = "0008cd026dc059d64a50d0dbf07755c2c4a4e557e3df8afa7141868b3ab200643d437ee7"
 * const address = Address.fromErgoTree(ergoTree).toString();
 * ```
 */
export declare class ErgoAddress {
    private _ergoTree;
    private _network?;
    private _type;
    get network(): Network | undefined;
    /**
     * ErgoTree hex string
     */
    get ergoTree(): HexString;
    get type(): AddressType;
    /**
     * New instance from ErgoTree bytes
     * @param ergoTree ErgoTree bytes
     */
    constructor(ergoTree: Uint8Array, network?: Network);
    /**
     * Create a new instance from an ErgoTree
     * @param ergoTree ErgoTree hex string
     */
    static fromErgoTree(ergoTree: HexString, network?: Network): ErgoAddress;
    /**
     * Create a new instance from a public key
     * @param publicKey Public key hex string
     */
    static fromPublicKey(publicKey: HexString | Uint8Array, network?: Network): ErgoAddress;
    static fromHash(hash: HexString | Uint8Array, network?: Network): ErgoAddress;
    /**
     * Create a new checked instance from an address string
     * @param encodedAddress Address encoded as base58
     */
    static fromBase58(encodedAddress: Base58String, skipCheck?: boolean): ErgoAddress;
    /**
     * Validate an address
     * @param address Address bytes or string
     */
    static validate(address: Uint8Array | Base58String): boolean;
    static getNetworkType(address: Base58String): Network;
    static getAddressType(address: Base58String): AddressType;
    getPublicKeys(): Uint8Array[];
    toP2SH(network?: Network): Base58String;
    /**
     * Encode address as base58 string
     */
    encode(network?: Network): Base58String;
    private _encode;
    /**
     * Encode address as base58 string
     */
    toString(network?: Network): Base58String;
}
