import { AddressType, Network } from "@fleet-sdk/common";
import { areEqual, endsWith, first, isDefined, startsWith } from "@fleet-sdk/common";
import { blake2b } from "@noble/hashes/blake2b";
import { bytesToHex, concatBytes, hexToBytes } from "@noble/hashes/utils";
import { base58 } from "@scure/base";
import { InvalidAddress } from "../errors/invalidAddress";
const CHECKSUM_LENGTH = 4;
const BLAKE_256_HASH_LENGTH = 32;
const P2PK_ERGOTREE_PREFIX = hexToBytes("0008cd");
const P2PK_ERGOTREE_LENGTH = 36;
const P2SH_ERGOTREE_SUFFIX = hexToBytes("d40801");
const P2SH_ERGOTREE_PREFIX = hexToBytes("00ea02d193b4cbe4e3010e040004300e18");
const P2SH_ERGOTREE_LENGTH = 44;
const P2SH_HASH_LENGTH = 24;
function _getEncodedNetworkType(addressBytes) {
    return first(addressBytes) & 0xf0;
}
function _getEncodedAddressType(addressBytes) {
    return first(addressBytes) & 0xf;
}
function _ensureBytes(content) {
    if (typeof content === "string") {
        return hexToBytes(content);
    }
    return content;
}
function blake2b256(input) {
    return blake2b(input, { dkLen: BLAKE_256_HASH_LENGTH });
}
function _getErgoTreeType(ergoTree) {
    if (ergoTree.length === P2PK_ERGOTREE_LENGTH && startsWith(ergoTree, P2PK_ERGOTREE_PREFIX)) {
        return AddressType.P2PK;
    }
    else if (ergoTree.length === P2SH_ERGOTREE_LENGTH &&
        startsWith(ergoTree, P2SH_ERGOTREE_PREFIX) &&
        endsWith(ergoTree, P2SH_ERGOTREE_SUFFIX)) {
        return AddressType.P2SH;
    }
    else {
        return AddressType.P2S;
    }
}
/**
 * Ergo address model
 *
 * @example
 * Convert address to ErgoTree hex string
 * ```
 * const address = new Address("9eZ24iqjKywjzAti9RnWWTR3CiNnLJDAcd2MenKodcAfzc8AFTu");
 * console.log(address.ergoTree);
 * ```
 *
 * @example
 * Convert ErgoTree hex string to address string
 * ```
 * const ergoTree = "0008cd026dc059d64a50d0dbf07755c2c4a4e557e3df8afa7141868b3ab200643d437ee7"
 * const address = Address.fromErgoTree(ergoTree).toString();
 * ```
 */
export class ErgoAddress {
    _ergoTree;
    _network;
    _type;
    get network() {
        return this._network;
    }
    /**
     * ErgoTree hex string
     */
    get ergoTree() {
        return bytesToHex(this._ergoTree);
    }
    get type() {
        return this._type;
    }
    /**
     * New instance from ErgoTree bytes
     * @param ergoTree ErgoTree bytes
     */
    constructor(ergoTree, network) {
        this._ergoTree = ergoTree;
        this._network = network;
        this._type = _getErgoTreeType(ergoTree);
    }
    /**
     * Create a new instance from an ErgoTree
     * @param ergoTree ErgoTree hex string
     */
    static fromErgoTree(ergoTree, network) {
        return new ErgoAddress(hexToBytes(ergoTree), network);
    }
    /**
     * Create a new instance from a public key
     * @param publicKey Public key hex string
     */
    static fromPublicKey(publicKey, network) {
        const ergoTree = concatBytes(P2PK_ERGOTREE_PREFIX, _ensureBytes(publicKey));
        return new ErgoAddress(ergoTree, network);
    }
    static fromHash(hash, network) {
        hash = _ensureBytes(hash);
        if (hash.length === BLAKE_256_HASH_LENGTH) {
            hash = hash.subarray(0, P2SH_HASH_LENGTH);
        }
        else if (hash.length != P2SH_HASH_LENGTH) {
            throw Error(`Invalid hash length: ${hash.length}`);
        }
        const ergoTree = concatBytes(P2SH_ERGOTREE_PREFIX, hash, P2SH_ERGOTREE_SUFFIX);
        return new ErgoAddress(ergoTree, network);
    }
    /**
     * Create a new checked instance from an address string
     * @param encodedAddress Address encoded as base58
     */
    static fromBase58(encodedAddress, skipCheck = false) {
        const bytes = base58.decode(encodedAddress);
        if (!skipCheck && !ErgoAddress.validate(bytes)) {
            throw new InvalidAddress(encodedAddress);
        }
        const network = _getEncodedNetworkType(bytes);
        const type = _getEncodedAddressType(bytes);
        const body = bytes.subarray(1, bytes.length - CHECKSUM_LENGTH);
        if (type === AddressType.P2PK) {
            return this.fromPublicKey(body, network);
        }
        else if (type === AddressType.P2SH) {
            return this.fromHash(body, network);
        }
        else {
            return new ErgoAddress(body, network);
        }
    }
    /**
     * Validate an address
     * @param address Address bytes or string
     */
    static validate(address) {
        const bytes = typeof address === "string" ? base58.decode(address) : address;
        if (bytes.length < CHECKSUM_LENGTH) {
            return false;
        }
        const script = bytes.subarray(0, bytes.length - CHECKSUM_LENGTH);
        const checksum = bytes.subarray(bytes.length - CHECKSUM_LENGTH, bytes.length);
        const blakeHash = blake2b256(script);
        const calculatedChecksum = blakeHash.subarray(0, CHECKSUM_LENGTH);
        return areEqual(calculatedChecksum, checksum);
    }
    static getNetworkType(address) {
        return _getEncodedNetworkType(base58.decode(address));
    }
    static getAddressType(address) {
        return _getEncodedAddressType(base58.decode(address));
    }
    getPublicKeys() {
        if (this.type === AddressType.P2PK) {
            return [this._ergoTree.subarray(P2PK_ERGOTREE_PREFIX.length)];
        }
        return [];
    }
    toP2SH(network) {
        if (this.type === AddressType.P2SH) {
            return this.encode();
        }
        const hash = blake2b256(this._ergoTree).subarray(0, P2SH_HASH_LENGTH);
        return this._encode(hash, AddressType.P2SH, network);
    }
    /**
     * Encode address as base58 string
     */
    encode(network) {
        let body;
        if (this.type === AddressType.P2PK) {
            body = first(this.getPublicKeys());
        }
        else if (this.type === AddressType.P2SH) {
            body = this._ergoTree.subarray(P2SH_ERGOTREE_PREFIX.length, P2SH_ERGOTREE_PREFIX.length + P2SH_HASH_LENGTH);
        }
        else {
            body = this._ergoTree;
        }
        return this._encode(body, this.type, network);
    }
    _encode(body, type, network) {
        if (!isDefined(network)) {
            if (isDefined(this.network)) {
                network = this.network;
            }
            else {
                network = Network.Mainnet;
            }
        }
        const head = Uint8Array.from([network + type]);
        body = concatBytes(head, body);
        const checksum = blake2b256(body).subarray(0, CHECKSUM_LENGTH);
        return base58.encode(concatBytes(body, checksum));
    }
    /**
     * Encode address as base58 string
     */
    toString(network) {
        return this.encode(network);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJnb0FkZHJlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZWxzL2VyZ29BZGRyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQTJCLE9BQU8sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTFELE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQztBQUMxQixNQUFNLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztBQUVqQyxNQUFNLG9CQUFvQixHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNsRCxNQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztBQUVoQyxNQUFNLG9CQUFvQixHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNsRCxNQUFNLG9CQUFvQixHQUFHLFVBQVUsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0FBQzlFLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0FBQ2hDLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBRTVCLFNBQVMsc0JBQXNCLENBQUMsWUFBd0I7SUFDdEQsT0FBTyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ3BDLENBQUM7QUFFRCxTQUFTLHNCQUFzQixDQUFDLFlBQXdCO0lBQ3RELE9BQU8sS0FBSyxDQUFDLFlBQVks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