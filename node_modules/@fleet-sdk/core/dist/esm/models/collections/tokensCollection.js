import { isDefined, isUndefined } from "@fleet-sdk/common";
import { ensureBigInt } from "@fleet-sdk/common";
import { NotFoundError } from "../../errors";
import { InsufficientTokenAmount } from "../../errors/insufficientTokenAmount";
import { MaxTokensOverflow } from "../../errors/maxTokensOverflow";
import { Collection } from "./collection";
export const MAX_TOKENS_PER_BOX = 120;
export class TokensCollection extends Collection {
    constructor(tokens, options) {
        super();
        if (isDefined(tokens)) {
            this.add(tokens, options);
        }
    }
    _map(token) {
        return { tokenId: token.tokenId, amount: ensureBigInt(token.amount) };
    }
    _addOne(token, options) {
        if (isUndefined(options) || (options.sum && !isDefined(options.index))) {
            if (this._sum(this._map(token))) {
                return this.length;
            }
        }
        if (this._items.length >= MAX_TOKENS_PER_BOX) {
            throw new MaxTokensOverflow();
        }
        super._addOne(token, options);
        return this.length;
    }
    add(items, options) {
        return super.add(items, options);
    }
    _sum(token) {
        for (const t of this._items) {
            if (t.tokenId === token.tokenId) {
                t.amount += token.amount;
                return true;
            }
        }
        return false;
    }
    remove(tokenIdOrIndex, amount) {
        let index = -1;
        if (typeof tokenIdOrIndex === "number") {
            if (this._isIndexOutOfBounds(tokenIdOrIndex)) {
                throw new RangeError(`Index '${tokenIdOrIndex}' is out of range.`);
            }
            index = tokenIdOrIndex;
        }
        else {
            index = this._items.findIndex((token) => token.tokenId === tokenIdOrIndex);
            if (this._isIndexOutOfBounds(index)) {
                throw new NotFoundError(`TokenId '${tokenIdOrIndex}' not found in assets collection.`);
            }
        }
        if (amount && index > -1) {
            const bigAmount = ensureBigInt(amount);
            const token = this._items[index];
            if (bigAmount > token.amount) {
                throw new InsufficientTokenAmount(`Insufficient token amount to perform a subtraction operation.`);
            }
            else if (bigAmount < token.amount) {
                token.amount -= bigAmount;
                return this.length;
            }
        }
        if (index > -1) {
            this._items.splice(index, 1);
        }
        return this.length;
    }
    contains(tokenId) {
        return this._items.some((x) => x.tokenId === tokenId);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zQ29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY29sbGVjdGlvbnMvdG9rZW5zQ29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVUsU0FBUyxFQUFFLFdBQVcsRUFBbUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsVUFBVSxFQUF3QixNQUFNLGNBQWMsQ0FBQztBQUVoRSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLENBQUM7QUFJdEMsTUFBTSxPQUFPLGdCQUFpQixTQUFRLFVBQW9EO0lBS3hGLFlBQVksTUFBdUMsRUFBRSxPQUF5QjtRQUM1RSxLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQUVrQixJQUFJLENBQUMsS0FBZ0Q7UUFDdEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDeEUsQ0FBQztJQUVrQixPQUFPLENBQ3hCLEtBQWdELEVBQ2hELE9BQXlCO1FBRXpCLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FB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