import { _0n, isDefined, isUndefined, some } from "@fleet-sdk/common";
import { NotFoundError } from "../../errors";
import { Collection } from "./collection";
export class OutputsCollection extends Collection {
    constructor(outputs) {
        super();
        if (isDefined(outputs)) {
            this.add(outputs);
        }
    }
    _map(output) {
        return output;
    }
    remove(outputs) {
        let index = -1;
        if (typeof outputs === "number") {
            if (this._isIndexOutOfBounds(outputs)) {
                throw new RangeError(`Index '${outputs}' is out of range.`);
            }
            index = outputs;
        }
        else {
            index = this._items.lastIndexOf(outputs);
            if (this._isIndexOutOfBounds(index)) {
                throw new NotFoundError("The output you are trying to remove is not present in the outputs collection.");
            }
        }
        if (index > -1) {
            this._items.splice(index, 1);
        }
        return this.length;
    }
    clone() {
        return new OutputsCollection(this._items);
    }
    sum(basis) {
        const tokens = {};
        let nanoErgs = _0n;
        if (basis) {
            if (basis.nanoErgs) {
                nanoErgs = basis.nanoErgs;
            }
            if (some(basis.tokens)) {
                for (const token of basis.tokens) {
                    if (isUndefined(token.amount)) {
                        continue;
                    }
                    tokens[token.tokenId] = (tokens[token.tokenId] || _0n) + token.amount;
                }
            }
        }
        for (const box of this._items) {
            nanoErgs += box.value;
            for (const token of box.tokens) {
                tokens[token.tokenId] = (tokens[token.tokenId] || _0n) + token.amount;
            }
        }
        return {
            nanoErgs,
            tokens: Object.keys(tokens).map((tokenId) => ({ tokenId, amount: tokens[tokenId] }))
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0c0NvbGxlY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kZWxzL2NvbGxlY3Rpb25zL291dHB1dHNDb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQWMsU0FBUyxFQUFFLFdBQVcsRUFBYSxJQUFJLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUc3RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMsTUFBTSxPQUFPLGlCQUFrQixTQUFRLFVBQXdDO0lBQzdFLFlBQVksT0FBa0M7UUFDNUMsS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQztJQUVTLElBQUksQ0FBQyxNQUFxQjtRQUNsQyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBSU0sTUFBTSxDQUFDLE9BQStCO1FBQzNDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDL0IsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3JDLE1BQU0sSUFBSSxVQUFVLENBQUMsVUFBVSxPQUFPLG9CQUFvQixDQUFDLENBQUM7YUFDN0Q7WUFFRCxLQUFLLEdBQUcsT0FBTyxDQUFDO1NBQ2pCO2FBQU07WUFDTCxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFekMsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ25DLE1BQU0sSUFBSSxhQUFhLENBQ3JCLCtFQUErRSxDQUNoRixDQUFDO2FBQ0g7U0FDRjtRQUVELElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzlCO1FBRUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFTSxLQUFLO1FBQ1YsT0FBTyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sR0FBRyxDQUFDLEtBQW9DO1FBQzdDLE1BQU0sTUFBTSxHQUFrQyxFQUFFLENBQUM7UUFDakQsSUFBSSxRQUFRLEdBQUcsR0FBRyxDQUFDO1FBRW5CLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFO2dCQUNsQixRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQzthQUMzQjtZQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDdEIsS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO29CQUNoQyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7d0JBQzdCLFNBQVM7cUJBQ1Y7b0JBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztpQkFDdkU7YUFDRjtTQUNGO1FBRUQsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQzdCLFFBQVEsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQ3RCLEtBQUssTUFBTSxLQUFLLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRTtnQkFDOUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQzthQUN2RTtTQUNGO1FBRUQsT0FBTztZQUNMLFFBQVE7WUFDUixNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDckYsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9