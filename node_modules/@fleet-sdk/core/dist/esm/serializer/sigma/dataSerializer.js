import { hexToBytes } from "@noble/hashes/utils";
import { vlqEncode } from "../vlq";
import { SigmaTypeCode } from "./sigmaTypeCode";
import { isColl, isPrimitiveType, isPrimitiveTypeCode } from "./utils";
export class DataSerializer {
    static serialize(data, buffer) {
        if (isPrimitiveType(data)) {
            switch (data.type) {
                case SigmaTypeCode.Boolean:
                    buffer.writeBoolean(data.value);
                    break;
                case SigmaTypeCode.Byte:
                    buffer.write(data.value);
                    break;
                case SigmaTypeCode.Short:
                case SigmaTypeCode.Int:
                    buffer.writeNumber(data.value);
                    break;
                case SigmaTypeCode.Long:
                    buffer.writeLong(data.value);
                    break;
                case SigmaTypeCode.BigInt: {
                    buffer.writeBigInt(data.value);
                    break;
                }
                case SigmaTypeCode.GroupElement:
                    buffer.writeBytes(data.value);
                    break;
                case SigmaTypeCode.SigmaProp: {
                    const node = data.value;
                    if (node.type === SigmaTypeCode.GroupElement) {
                        buffer.write(0xcd); // CreateProveDlog operation
                        DataSerializer.serialize(node, buffer);
                    }
                    else {
                        throw Error("Not implemented");
                    }
                    break;
                }
                case SigmaTypeCode.Unit: // same as void, don't need to save anything
                    break;
                // case SigmaTypeCode.Box:
                default:
                    throw Error("Not implemented");
            }
        }
        else if (isColl(data)) {
            if (typeof data.value === "string") {
                buffer.writeBytes(vlqEncode(data.value.length / 2));
            }
            else {
                buffer.writeBytes(vlqEncode(data.value.length));
            }
            switch (data.elementsType) {
                case SigmaTypeCode.Boolean:
                    buffer.writeBits(data.value);
                    break;
                case SigmaTypeCode.Byte: {
                    let bytes;
                    if (typeof data.value === "string") {
                        bytes = hexToBytes(data.value);
                    }
                    else {
                        bytes = Uint8Array.from(data.value);
                    }
                    buffer.writeBytes(bytes);
                    break;
                }
                default:
                    for (let i = 0; i < data.value.length; i++) {
                        DataSerializer.serialize({ value: data.value[i], type: data.elementsType }, buffer);
                    }
            }
        }
        else {
            throw Error("Not implemented");
        }
    }
    static deserialize(typeCode, reader) {
        if (isPrimitiveTypeCode(typeCode)) {
            switch (typeCode) {
                case SigmaTypeCode.Boolean:
                    return reader.readBoolean();
                case SigmaTypeCode.Byte:
                    return reader.readByte();
                case SigmaTypeCode.Short:
                case SigmaTypeCode.Int:
                    return reader.readNumber();
                case SigmaTypeCode.Long:
                    return reader.readLong();
                // case SigmaTypeCode.BigInt:
                // case SigmaTypeCode.GroupElement:
                // case SigmaTypeCode.SigmaProp:
                // case SigmaTypeCode.Unit:
                // case SigmaTypeCode.Box:
                // default:
                //   break;
            }
        }
        throw new Error("Type parsing not yet implemented.");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YVNlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2VyaWFsaXplci9zaWdtYS9kYXRhU2VyaWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUduQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFdkUsTUFBTSxPQUFPLGNBQWM7SUFDbEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFnQixFQUFFLE1BQXVCO1FBQy9ELElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pCLFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDakIsS0FBSyxhQUFhLENBQUMsT0FBTztvQkFDeEIsTUFBTSxDQUFDLFlBQVksQ0FBRSxJQUFxQyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNsRSxNQUFNO2dCQUNSLEtBQUssYUFBYSxDQUFDLElBQUk7b0JBQ3JCLE1BQU0sQ0FBQyxLQUFLLENBQUUsSUFBb0MsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDMUQsTUFBTTtnQkFDUixLQUFLLGFBQWEsQ0FBQyxLQUFLLENBQUM7Z0JBQ3pCLEtBQUssYUFBYSxDQUFDLEdBQUc7b0JBQ3BCLE1BQU0sQ0FBQyxXQUFXLENBQUUsSUFBb0MsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDaEUsTUFBTTtnQkFDUixLQUFLLGFBQWEsQ0FBQyxJQUFJO29CQUNyQixNQUFNLENBQUMsU0FBUyxDQUFFLElBQW9DLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQzlELE1BQU07Z0JBQ1IsS0FBSyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7b0JB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