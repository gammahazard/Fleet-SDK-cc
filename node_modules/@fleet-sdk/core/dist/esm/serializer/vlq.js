import { _0n, _127n, _128n, _7n } from "@fleet-sdk/common";
/**
 * A **variable-length quantity (VLQ)** is a universal code that uses an arbitrary number
 * of binary octets (eight-bit bytes) to represent an arbitrarily large integer. A VLQ
 * is essentially a base-128 representation of an unsigned integer with the addition of
 * the eighth bit to mark continuation of bytes. VLQ is identical to LEB128 except in
 * endianness. See the example below.
 */
/**
 * Decode VLQ bytes to an unsigned integer value
 * @param reader VLQ bytes
 * @returns Unsigned integer value
 */
export function vlqEncode(value) {
    // source: https://stackoverflow.com/a/3564685
    if (value === 0) {
        return Uint8Array.from([0]);
    }
    else if (value < 0) {
        throw new RangeError("Variable Length Quantity not supported for negative numbers");
    }
    const bytes = [];
    do {
        let lower7bits = value & 0x7f;
        value >>= 7;
        if (value > 0) {
            lower7bits |= 0x80;
        }
        bytes.push(lower7bits);
    } while (value > 0);
    return Uint8Array.from(bytes);
}
/**
 * Decode VLQ bytes to an unsigned integer value
 * @param reader VLQ bytes
 * @returns Unsigned integer value
 */
export function vlqDecode(reader) {
    if (reader.isEmpty) {
        return 0;
    }
    let value = 0;
    let shift = 0;
    let lower7bits = 0;
    do {
        lower7bits = reader.readByte();
        value |= (lower7bits & 0x7f) << shift;
        shift += 7;
    } while ((lower7bits & 0x80) != 0);
    return value;
}
/**
 * Encode a unsigned big integer to VLQ bytes
 * @param value unsigned bit integer
 * @returns VLQ bytes
 */
export function vqlEncodeBigInt(value) {
    // source: https://stackoverflow.com/a/3564685
    if (value === _0n) {
        return Uint8Array.from([0]);
    }
    else if (value < _0n) {
        throw new RangeError("Variable Length Quantity not supported for negative numbers");
    }
    const bytes = [];
    do {
        let lower7bits = Number(value & _127n);
        value >>= _7n;
        if (value > 0) {
            lower7bits |= 0x80;
        }
        bytes.push(lower7bits);
    } while (value > 0);
    return Uint8Array.from(bytes);
}
/**
 * Decode VLQ bytes to an unsigned big integer value
 * @param reader VLQ bytes
 * @returns Unsigned integer value
 */
export function vlqDecodeBigInt(reader) {
    if (reader.isEmpty) {
        return _0n;
    }
    let value = _0n;
    let shift = _0n;
    let lower7bits = _0n;
    do {
        lower7bits = BigInt(reader.readByte());
        value |= (lower7bits & _127n) << shift;
        shift += _7n;
    } while ((lower7bits & _128n) != _0n);
    return value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmxxLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcmlhbGl6ZXIvdmxxLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUczRDs7Ozs7O0dBTUc7QUFFSDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUFhO0lBQ3JDLDhDQUE4QztJQUU5QyxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7UUFDZixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzdCO1NBQU0sSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLE1BQU0sSUFBSSxVQUFVLENBQUMsNkRBQTZELENBQUMsQ0FBQztLQUNyRjtJQUVELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNqQixHQUFHO1FBQ0QsSUFBSSxVQUFVLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQztRQUM5QixLQUFLLEtBQUssQ0FBQyxDQUFDO1FBRVosSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ2IsVUFBVSxJQUFJLElBQUksQ0FBQztTQUNwQjtRQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDeEIsUUFBUSxLQUFLLEdBQUcsQ0FBQyxFQUFFO0lBRXBCLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxTQUFTLENBQUMsTUFBdUI7SUFDL0MsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFFRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFFbkIsR0FBRztRQUNELFVBQVUsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDL0IsS0FBSyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQztRQUN0QyxLQUFLLElBQUksQ0FBQyxDQUFDO0tBQ1osUUFBUSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFFbkMsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUMsS0FBYTtJQUMzQyw4Q0FBOEM7SUFFOUMsSUFBSSxLQUFLLEtBQUssR0FBRyxFQUFFO1FBQ2pCLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDN0I7U0FBTSxJQUFJLEtBQUssR0FBRyxHQUFHLEVBQUU7UUFDdEIsTUFBTSxJQUFJLFVBQVUsQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO0tBQ3JGO0lBRUQsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLEdBQUc7UUFDRCxJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLEtBQUssS0FBSyxHQUFHLENBQUM7UUFFZCxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDYixVQUFVLElBQUksSUFBSSxDQUFDO1NBQ3BCO1FBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUN4QixRQUFRLEtBQUssR0FBRyxDQUFDLEVBQUU7SUFFcEIsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUF1QjtJQUNyRCxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxHQUFHLENBQUM7S0FDWjtJQUVELElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztJQUNoQixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUM7SUFDaEIsSUFBSSxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBRXJCLEdBQUc7UUFDRCxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLEtBQUssSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUM7UUFDdkMsS0FBSyxJQUFJLEdBQUcsQ0FBQztLQUNkLFFBQVEsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxFQUFFO0lBRXRDLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyJ9