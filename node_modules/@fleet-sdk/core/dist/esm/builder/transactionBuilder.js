import { isUndefined, Network } from "@fleet-sdk/common";
import { _0n, chunk, ensureBigInt, isDefined, isHex, some, utxoSum } from "@fleet-sdk/common";
import { InvalidInput, MalformedTransaction, NotAllowedTokenBurning } from "../errors";
import { NonStandardizedMinting } from "../errors/nonStandardizedMinting";
import { ErgoAddress, InputsCollection, OutputsCollection, TokensCollection } from "../models";
import { OutputBuilder, SAFE_MIN_BOX_VALUE } from "./outputBuilder";
import { createPluginContext } from "./pluginContext";
import { BoxSelector } from "./selector";
import { TransactionBuilderSettings } from "./transactionBuilderSettings";
export const RECOMMENDED_MIN_FEE_VALUE = BigInt(1100000);
export const FEE_CONTRACT = "1005040004000e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304";
export class TransactionBuilder {
    _inputs;
    _dataInputs;
    _outputs;
    _settings;
    _creationHeight;
    _selectorCallbacks;
    _changeAddress;
    _feeAmount;
    _burning;
    _plugins;
    constructor(creationHeight) {
        this._inputs = new InputsCollection();
        this._dataInputs = new InputsCollection();
        this._outputs = new OutputsCollection();
        this._settings = new TransactionBuilderSettings();
        this._creationHeight = creationHeight;
    }
    get inputs() {
        return this._inputs;
    }
    get dataInputs() {
        return this._dataInputs;
    }
    get outputs() {
        return this._outputs;
    }
    get changeAddress() {
        return this._changeAddress;
    }
    get fee() {
        return this._feeAmount;
    }
    get burning() {
        return this._burning;
    }
    get settings() {
        return this._settings;
    }
    get creationHeight() {
        return this._creationHeight;
    }
    /**
     * Syntax sugar to be used in composition with another methods
     *
     * @example
     * ```
     * new TransactionBuilder(height)
     *   .from(inputs)
     *   .and.from(otherInputs);
     * ```
     */
    get and() {
        return this;
    }
    from(inputs) {
        this._inputs.add(inputs);
        return this;
    }
    to(outputs, options) {
        this._outputs.add(outputs, options);
        return this;
    }
    withDataFrom(dataInputs, options) {
        this._dataInputs.add(dataInputs, options);
        return this;
    }
    sendChangeTo(address) {
        if (typeof address === "string") {
            this._changeAddress = isHex(address)
                ? ErgoAddress.fromErgoTree(address, Network.Mainnet)
                : ErgoAddress.fromBase58(address);
        }
        else {
            this._changeAddress = address;
        }
        return this;
    }
    payFee(amount) {
        this._feeAmount = ensureBigInt(amount);
        return this;
    }
    payMinFee() {
        this.payFee(RECOMMENDED_MIN_FEE_VALUE);
        return this;
    }
    burnTokens(tokens) {
        if (!this._burning) {
            this._burning = new TokensCollection();
        }
        this._burning.add(tokens);
        return this;
    }
    configure(callback) {
        callback(this._settings);
        return this;
    }
    configureSelector(selectorCallback) {
        if (isUndefined(this._selectorCallbacks)) {
            this._selectorCallbacks = [];
        }
        this._selectorCallbacks.push(selectorCallback);
        return this;
    }
    extend(plugins) {
        if (!this._plugins) {
            this._plugins = [];
        }
        this._plugins.push({ execute: plugins, pending: true });
        return this;
    }
    eject(ejector) {
        ejector({
            inputs: this.inputs,
            dataInputs: this.dataInputs,
            outputs: this.outputs,
            burning: this.burning,
            settings: this.settings,
            selection: (selectorCallback) => {
                this.configureSelector(selectorCallback);
            }
        });
        return this;
    }
    build(buildOutputType) {
        if (some(this._plugins)) {
            const context = createPluginContext(this);
            for (const plugin of this._plugins) {
                if (plugin.pending) {
                    plugin.execute(context);
                    plugin.pending = false;
                }
            }
        }
        if (this._isMinting()) {
            if (this._isMoreThanOneTokenBeingMinted()) {
                throw new MalformedTransaction("only one token can be minted per transaction.");
            }
            if (this._isTheSameTokenBeingMintedOutsideTheMintingBox()) {
                throw new NonStandardizedMinting("EIP-4 tokens cannot be minted from outside the minting box.");
            }
        }
        const outputs = this.outputs.clone();
        if (isDefined(this._feeAmount)) {
            outputs.add(new OutputBuilder(this._feeAmount, FEE_CONTRACT));
        }
        const selector = new BoxSelector(this.inputs.toArray());
        if (some(this._selectorCallbacks)) {
            for (const selectorCallBack of this._selectorCallbacks) {
                selectorCallBack(selector);
            }
        }
        const target = some(this._burning)
            ? outputs.sum({ tokens: this._burning.toArray() })
            : outputs.sum();
        let inputs = selector.select(target);
        if (isDefined(this._changeAddress)) {
            let change = this._calcDiff(utxoSum(inputs), target);
            if (some(change.tokens)) {
                let requiredNanoErgs = this._calcRequiredNanoErgsForChange(change.tokens.length);
                while (requiredNanoErgs > change.nanoErgs) {
                    inputs = selector.select({
                        nanoErgs: target.nanoErgs + requiredNanoErgs,
                        tokens: target.tokens
                    });
                    change = this._calcDiff(utxoSum(inputs), target);
                    requiredNanoErgs = this._calcRequiredNanoErgsForChange(change.tokens.length);
                }
                const chunkedTokens = chunk(change.tokens, this._settings.maxTokensPerChangeBox);
                for (const tokens of chunkedTokens) {
                    const nanoErgs = change.nanoErgs > requiredNanoErgs
                        ? change.nanoErgs - requiredNanoErgs + SAFE_MIN_BOX_VALUE
                        : SAFE_MIN_BOX_VALUE;
                    change.nanoErgs -= nanoErgs;
                    outputs.add(new OutputBuilder(nanoErgs, this._changeAddress).addTokens(tokens));
                }
            }
            if (change.nanoErgs > _0n) {
                outputs.add(new OutputBuilder(change.nanoErgs, this._changeAddress));
            }
        }
        for (const input of inputs) {
            if (!input.isValid()) {
                throw new InvalidInput(input.boxId);
            }
        }
        const unsignedTransaction = {
            inputs: inputs.map((input) => input.toUnsignedInputObject(buildOutputType || "default")),
            dataInputs: this.dataInputs
                .toArray()
                .map((input) => input.toObject(buildOutputType || "default")),
            outputs: outputs
                .toArray()
                .map((output) => output.setCreationHeight(this._creationHeight, { replace: false }).build(inputs))
        };
        let burning = this._calcBurningBalance(unsignedTransaction, inputs);
        if (burning.nanoErgs > _0n) {
            throw new MalformedTransaction("it's not possible to burn ERG.");
        }
        if (some(burning.tokens) && some(this._burning)) {
            burning = this._calcDiff(burning, { nanoErgs: _0n, tokens: this._burning.toArray() });
        }
        if (!this._settings.canBurnTokens && some(burning.tokens)) {
            throw new NotAllowedTokenBurning();
        }
        return unsignedTransaction;
    }
    _isMinting() {
        for (const output of this._outputs) {
            if (output.minting) {
                return true;
            }
        }
        return false;
    }
    _isMoreThanOneTokenBeingMinted() {
        let mintingCount = 0;
        for (const output of this._outputs) {
            if (isDefined(output.minting)) {
                mintingCount++;
                if (mintingCount > 1) {
                    return true;
                }
            }
        }
        return false;
    }
    _isTheSameTokenBeingMintedOutsideTheMintingBox() {
        const mintingTokenId = this._getMintingTokenId();
        if (isUndefined(mintingTokenId)) {
            return false;
        }
        for (const output of this._outputs) {
            if (output.tokens.contains(mintingTokenId)) {
                return true;
            }
        }
        return false;
    }
    _getMintingTokenId() {
        let tokenId = undefined;
        for (const output of this._outputs) {
            if (output.minting) {
                tokenId = output.minting.tokenId;
                break;
            }
        }
        return tokenId;
    }
    _calcBurningBalance(unsignedTransaction, inputs) {
        const usedInputs = inputs.filter((input) => isDefined(unsignedTransaction.inputs.find((txInput) => txInput.boxId === input.boxId)));
        return this._calcDiff(utxoSum(usedInputs), utxoSum(unsignedTransaction.outputs));
    }
    _calcChangeLength(tokensLength) {
        return Math.ceil(tokensLength / this._settings.maxTokensPerChangeBox);
    }
    _calcRequiredNanoErgsForChange(tokensLength, minNanoErgsPerBox = SAFE_MIN_BOX_VALUE) {
        return minNanoErgsPerBox * BigInt(this._calcChangeLength(tokensLength));
    }
    _calcDiff(inputs, outputs) {
        const tokens = [];
        const nanoErgs = inputs.nanoErgs - outputs.nanoErgs;
        for (const token of inputs.tokens) {
            const balance = token.amount - (outputs.tokens.find((t) => t.tokenId === token.tokenId)?.amount || _0n);
            if (balance > _0n) {
                tokens.push({ tokenId: token.tokenId, amount: balance });
            }
        }
        return { nanoErgs, tokens };
    }
}
//# sourceMappingURL=data:application/json;base64,