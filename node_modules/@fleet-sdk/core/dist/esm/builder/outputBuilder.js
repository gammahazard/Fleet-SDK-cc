import { _0n } from "@fleet-sdk/common";
import { areRegistersDenselyPacked, ensureBigInt, first, isEmpty, isHex, isUndefined, removeUndefined } from "@fleet-sdk/common";
import { stringToBytes } from "@scure/base";
import { InvalidRegistersPacking } from "../errors/invalidRegistersPacking";
import { UndefinedCreationHeight } from "../errors/undefinedCreationHeight";
import { UndefinedMintingContext } from "../errors/undefinedMintingContext";
import { ErgoAddress } from "../models";
import { TokensCollection } from "../models/collections/tokensCollection";
import { SConstant } from "../serializer/sigma/constantSerializer";
import { SByte, SColl } from "../serializer/sigma/sigmaTypes";
export const SAFE_MIN_BOX_VALUE = BigInt(1000000);
export class OutputBuilder {
    _value;
    _address;
    _tokens;
    _creationHeight;
    _registers;
    _minting;
    constructor(value, recipient, creationHeight) {
        this._value = ensureBigInt(value);
        this._creationHeight = creationHeight;
        this._tokens = new TokensCollection();
        this._registers = {};
        if (this._value <= _0n) {
            throw new Error("An UTxO cannot be created without a minimum required amount.");
        }
        if (typeof recipient === "string") {
            this._address = isHex(recipient)
                ? ErgoAddress.fromErgoTree(recipient)
                : ErgoAddress.fromBase58(recipient);
        }
        else {
            this._address = recipient;
        }
    }
    get value() {
        return this._value;
    }
    get address() {
        return this._address;
    }
    get ergoTree() {
        return this._address.ergoTree;
    }
    get creationHeight() {
        return this._creationHeight;
    }
    get tokens() {
        return this._tokens;
    }
    get additionalRegisters() {
        return this._registers;
    }
    get minting() {
        return this._minting;
    }
    addTokens(tokens, options) {
        if (tokens instanceof TokensCollection) {
            this._tokens.add(tokens.toArray(), options);
        }
        else {
            this._tokens.add(tokens, options);
        }
        return this;
    }
    mintToken(token) {
        this._minting = { ...token, amount: ensureBigInt(token.amount) };
        return this;
    }
    setCreationHeight(height, options) {
        if (isUndefined(options) ||
            options.replace === true ||
            (options.replace === false && isUndefined(this._creationHeight))) {
            this._creationHeight = height;
        }
        return this;
    }
    setAdditionalRegisters(registers) {
        this._registers = removeUndefined(registers);
        if (!areRegistersDenselyPacked(registers)) {
            throw new InvalidRegistersPacking();
        }
        return this;
    }
    eject(ejector) {
        ejector({ tokens: this._tokens });
        return this;
    }
    build(transactionInputs) {
        let tokens = this.tokens.toArray();
        if (this.minting) {
            if (isEmpty(transactionInputs)) {
                throw new UndefinedMintingContext();
            }
            if (isEmpty(this.additionalRegisters)) {
                this.setAdditionalRegisters({
                    R4: SConstant(SColl(SByte, stringToBytes("utf8", this.minting.name || ""))),
                    R5: SConstant(SColl(SByte, stringToBytes("utf8", this.minting.description || ""))),
                    R6: SConstant(SColl(SByte, stringToBytes("utf8", this.minting.decimals?.toString() || "0")))
                });
            }
            tokens = [
                {
                    tokenId: first(transactionInputs).boxId,
                    amount: this.minting.amount
                },
                ...tokens
            ];
        }
        if (isUndefined(this.creationHeight)) {
            throw new UndefinedCreationHeight();
        }
        return {
            value: this.value.toString(),
            ergoTree: this.ergoTree,
            creationHeight: this.creationHeight,
            assets: tokens.map((token) => {
                return {
                    tokenId: token.tokenId,
                    amount: token.amount.toString()
                };
            }),
            additionalRegisters: this.additionalRegisters
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0QnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9idWlsZGVyL291dHB1dEJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLEdBQUcsRUFXSixNQUFNLG1CQUFtQixDQUFDO0FBQzNCLE9BQU8sRUFDTCx5QkFBeUIsRUFDekIsWUFBWSxFQUNaLEtBQUssRUFDTCxPQUFPLEVBQ1AsS0FBSyxFQUNMLFdBQVcsRUFDWCxlQUFlLEVBQ2hCLE1BQU0sbUJBQW1CLENBQUM7QUFDM0IsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM1QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBbUIsZ0JBQWdCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUMzRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDbkUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU5RCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFbEQsTUFBTSxPQUFPLGFBQWE7SUFDUCxNQUFNLENBQVM7SUFDZixRQUFRLENBQWM7SUFDdEIsT0FBTyxDQUFtQjtJQUNuQyxlQUFlLENBQVU7SUFDekIsVUFBVSxDQUF3QjtJQUNsQyxRQUFRLENBQW9CO0lBRXBDLFlBQ0UsS0FBYSxFQUNiLFNBQWdELEVBQ2hELGNBQXVCO1FBRXZCLElBQUksQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBRXJCLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLEVBQUU7WUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO1NBQ2pGO1FBRUQsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO2dCQUM5QixDQUFDLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7Z0JBQ3JDLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3ZDO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztTQUMzQjtJQUNILENBQUM7SUFFRCxJQUFXLEtBQUs7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELElBQVcsT0FBTztRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFXLGNBQWM7UUFDdkIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFXLE1BQU07UUFDZixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVcsbUJBQW1CO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRU0sU0FBUyxDQUNkLE1BQXlELEVBQ3pELE9BQXlCO1FBRXpCLElBQUksTUFBTSxZQUFZLGdCQUFnQixFQUFFO1lBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM3QzthQUFNO1lBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ25DO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sU0FBUyxDQUFDLEtBQXVCO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBRWpFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLGlCQUFpQixDQUFDLE1BQWMsRUFBRSxPQUE4QjtRQUNyRSxJQUNFLFdBQVcsQ0FBQyxPQUFPLENBQUM7WUFDcEIsT0FBTyxDQUFDLE9BQU8sS0FBSyxJQUFJO1lBQ3hCLENBQUMsT0FBTyxDQUFDLE9BQU8sS0FBSyxLQUFLLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUNoRTtZQUNBLElBQUksQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDO1NBQy9CO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sc0JBQXNCLENBQUMsU0FBZ0M7UUFDNUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3pDLE1BQU0sSUFBSSx1QkFBdUIsRUFBRSxDQUFDO1NBQ3JDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQXdEO1FBQ25FLE9BQU8sQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUVsQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxLQUFLLENBQUMsaUJBQW1EO1FBQzlELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFbkMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksT0FBTyxDQUFDLGlCQUFpQixDQUFDLEVBQUU7Z0JBQzlCLE1BQU0sSUFBSSx1QkFBdUIsRUFBRSxDQUFDO2FBQ3JDO1lBRUQsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztvQkFDMUIsRUFBRSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDM0UsRUFBRSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDbEYsRUFBRSxFQUFFLFNBQVMsQ0FDWCxLQUFLLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsQ0FDOUU7aUJBQ0YsQ0FBQyxDQUFDO2FBQ0o7WUFFRCxNQUFNLEdBQUc7Z0JBQ1A7b0JBQ0UsT0FBTyxFQUFFLEtBQUssQ0FBOEIsaUJBQWlCLENBQUMsQ0FBQyxLQUFLO29CQUNwRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNO2lCQUM1QjtnQkFDRCxHQUFHLE1BQU07YUFDVixDQUFDO1NBQ0g7UUFFRCxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDcEMsTUFBTSxJQUFJLHVCQUF1QixFQUFFLENBQUM7U0FDckM7UUFFRCxPQUFPO1lBQ0wsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQzVCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDM0IsT0FBTztvQkFDTCxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87b0JBQ3RCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtpQkFDaEMsQ0FBQztZQUNKLENBQUMsQ0FBQztZQUNGLG1CQUFtQixFQUFFLElBQUksQ0FBQyxtQkFBbUI7U0FDOUMsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9