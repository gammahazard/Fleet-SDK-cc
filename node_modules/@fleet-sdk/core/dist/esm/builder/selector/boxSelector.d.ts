import { Amount, Box, BoxCandidate, BoxId, FilterPredicate, OneOrMore, SortingDirection, SortingSelector, TokenTargetAmount } from "@fleet-sdk/common";
import { ISelectionStrategy } from "./strategies/ISelectionStrategy";
import { SelectorFunction } from "./strategies/customSelectionStrategy";
export type SelectionTarget = {
    nanoErgs?: bigint;
    tokens?: TokenTargetAmount<bigint>[];
};
export declare class BoxSelector<T extends Box<bigint>> {
    private readonly _inputs;
    private _strategy?;
    private _ensureFilterPredicate?;
    private _inputsSortSelector?;
    private _inputsSortDir?;
    private _ensureInclusionBoxIds?;
    constructor(inputs: T[]);
    defineStrategy(strategy: ISelectionStrategy | SelectorFunction): BoxSelector<T>;
    select(target: SelectionTarget): T[];
    private _deepCloneTarget;
    private _getUnreachedTargets;
    private _sort;
    ensureInclusion(predicate: FilterPredicate<Box<bigint>>): BoxSelector<T>;
    ensureInclusion(boxIds: OneOrMore<BoxId>): BoxSelector<T>;
    orderBy(selector: SortingSelector<Box<bigint>>, direction?: SortingDirection): BoxSelector<T>;
    private _isISelectionStrategyImplementation;
    static buildTargetFrom(boxes: Box<Amount>[] | BoxCandidate<Amount>[]): SelectionTarget;
}
