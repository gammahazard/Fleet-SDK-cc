import { first, isUndefined } from "@fleet-sdk/common";
import { _0n, ensureBigInt, hasDuplicatesBy, isDefined, isEmpty, orderBy, some, sumBy, utxoSum } from "@fleet-sdk/common";
import { DuplicateInputSelectionError } from "../../errors/duplicateInputSelectionError";
import { InsufficientInputs } from "../../errors/insufficientInputs";
import { AccumulativeSelectionStrategy } from "./strategies/accumulativeSelectionStrategy";
import { CustomSelectionStrategy } from "./strategies/customSelectionStrategy";
export class BoxSelector {
    _inputs;
    _strategy;
    _ensureFilterPredicate;
    _inputsSortSelector;
    _inputsSortDir;
    _ensureInclusionBoxIds;
    constructor(inputs) {
        this._inputs = inputs;
    }
    defineStrategy(strategy) {
        if (this._isISelectionStrategyImplementation(strategy)) {
            this._strategy = strategy;
        }
        else {
            this._strategy = new CustomSelectionStrategy(strategy);
        }
        return this;
    }
    select(target) {
        if (!this._strategy) {
            this._strategy = new AccumulativeSelectionStrategy();
        }
        const remaining = this._deepCloneTarget(target);
        let unselected = [...this._inputs];
        let selected = [];
        const predicate = this._ensureFilterPredicate;
        const inclusion = this._ensureInclusionBoxIds;
        if (isDefined(predicate)) {
            if (isDefined(inclusion)) {
                selected = unselected.filter((box) => predicate(box) || inclusion.has(box.boxId));
            }
            else {
                selected = unselected.filter(predicate);
            }
        }
        else if (isDefined(inclusion)) {
            selected = unselected.filter((box) => inclusion.has(box.boxId));
        }
        if (isDefined(selected)) {
            unselected = unselected.filter((box) => !selected.some((sel) => sel.boxId === box.boxId));
            if (isDefined(remaining.nanoErgs)) {
                remaining.nanoErgs -= sumBy(selected, (input) => input.value);
            }
            if (isDefined(remaining.tokens) && selected.some((input) => !isEmpty(input.assets))) {
                for (const tokenTarget of remaining.tokens) {
                    if (tokenTarget.amount) {
                        tokenTarget.amount -= utxoSum(selected, tokenTarget.tokenId);
                    }
                }
            }
        }
        unselected = this._sort(unselected);
        selected = selected.concat(this._strategy.select(unselected, remaining));
        if (hasDuplicatesBy(selected, (item) => item.boxId)) {
            throw new DuplicateInputSelectionError();
        }
        const unreached = this._getUnreachedTargets(selected, target);
        if (unreached.nanoErgs || some(unreached.tokens)) {
            throw new InsufficientInputs(unreached);
        }
        return selected;
    }
    _deepCloneTarget(target) {
        return {
            nanoErgs: target.nanoErgs,
            tokens: isDefined(target.tokens)
                ? target.tokens.map((t) => ({ tokenId: t.tokenId, amount: t.amount }))
                : undefined
        };
    }
    _getUnreachedTargets(inputs, target) {
        const unreached = { nanoErgs: undefined, tokens: undefined };
        const selectedNanoergs = sumBy(inputs, (input) => input.value);
        if (target.nanoErgs && target.nanoErgs > selectedNanoergs) {
            unreached.nanoErgs = target.nanoErgs - selectedNanoergs;
        }
        if (isEmpty(target.tokens)) {
            return unreached;
        }
        for (const tokenTarget of target.tokens) {
            const totalSelected = utxoSum(inputs, tokenTarget.tokenId);
            if (isDefined(tokenTarget.amount) && tokenTarget.amount > totalSelected) {
                if (tokenTarget.tokenId === first(inputs).boxId) {
                    continue;
                }
                if (isUndefined(unreached.tokens)) {
                    unreached.tokens = [];
                }
                unreached.tokens.push({
                    tokenId: tokenTarget.tokenId,
                    amount: tokenTarget.amount - totalSelected
                });
            }
        }
        return unreached;
    }
    _sort(inputs) {
        if (!this._inputsSortSelector) {
            return orderBy(inputs, (input) => input.creationHeight, "asc");
        }
        return orderBy(inputs, this._inputsSortSelector, this._inputsSortDir || "asc");
    }
    ensureInclusion(predicateOrBoxIds) {
        if (typeof predicateOrBoxIds === "function") {
            this._ensureFilterPredicate = predicateOrBoxIds;
        }
        else {
            if (isUndefined(this._ensureInclusionBoxIds)) {
                this._ensureInclusionBoxIds = new Set();
            }
            if (Array.isArray(predicateOrBoxIds)) {
                for (const boxId of predicateOrBoxIds) {
                    this._ensureInclusionBoxIds.add(boxId);
                }
            }
            else {
                this._ensureInclusionBoxIds.add(predicateOrBoxIds);
            }
        }
        return this;
    }
    orderBy(selector, direction) {
        this._inputsSortSelector = selector;
        this._inputsSortDir = direction;
        return this;
    }
    _isISelectionStrategyImplementation(obj) {
        if (obj.select) {
            return true;
        }
        return false;
    }
    static buildTargetFrom(boxes) {
        const tokens = {};
        let nanoErgs = _0n;
        for (const box of boxes) {
            nanoErgs += ensureBigInt(box.value);
            for (const token of box.assets) {
                tokens[token.tokenId] = (tokens[token.tokenId] || _0n) + ensureBigInt(token.amount);
            }
        }
        return {
            nanoErgs,
            tokens: Object.keys(tokens).map((tokenId) => ({ tokenId, amount: tokens[tokenId] }))
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm94U2VsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYnVpbGRlci9zZWxlY3Rvci9ib3hTZWxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBTUwsS0FBSyxFQUNMLFdBQVcsRUFLWixNQUFNLG1CQUFtQixDQUFDO0FBQzNCLE9BQU8sRUFDTCxHQUFHLEVBQ0gsWUFBWSxFQUNaLGVBQWUsRUFDZixTQUFTLEVBQ1QsT0FBTyxFQUNQLE9BQU8sRUFDUCxJQUFJLEVBQ0osS0FBSyxFQUNMLE9BQU8sRUFDUixNQUFNLG1CQUFtQixDQUFDO0FBQzNCLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRXJFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzNGLE9BQU8sRUFBRSx1QkFBdUIsRUFBb0IsTUFBTSxzQ0FBc0MsQ0FBQztBQUlqRyxNQUFNLE9BQU8sV0FBVztJQUNMLE9BQU8sQ0FBZ0I7SUFDaEMsU0FBUyxDQUFzQjtJQUMvQixzQkFBc0IsQ0FBZ0M7SUFDdEQsbUJBQW1CLENBQWdDO0lBQ25ELGNBQWMsQ0FBb0I7SUFDbEMsc0JBQXNCLENBQWM7SUFFNUMsWUFBWSxNQUFXO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ3hCLENBQUM7SUFFTSxjQUFjLENBQUMsUUFBK0M7UUFDbkUsSUFBSSxJQUFJLENBQUMsbUNBQW1DLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDdEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7U0FDM0I7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN4RDtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLE1B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ekM7WUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFBRTtnQkFDcEMsS0FBSyxNQUFNLEtBQUssSUFBSSxpQkFBaUIsRUFBRTtvQkFDckMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDeEM7YUFDRjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7YUFDcEQ7U0FDRjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLE9BQU8sQ0FDWixRQUFzQyxFQUN0QyxTQUE0QjtRQUU1QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsUUFBUSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1FBRWhDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVPLG1DQUFtQyxDQUFDLEdBQVk7UUFDdEQsSUFBSyxHQUEwQixDQUFDLE1BQU0sRUFBRTtZQUN0QyxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUE2QztRQUN6RSxNQUFNLE1BQU0sR0FBa0MsRUFBRSxDQUFDO1FBQ2pELElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQztRQUVuQixLQUFLLE1BQU0sR0FBRyxJQUFJLEtBQUssRUFBRTtZQUN2QixRQUFRLElBQUksWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQyxLQUFLLE1BQU0sS0FBSyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7Z0JBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDckY7U0FDRjtRQUVELE9BQU87WUFDTCxRQUFRO1lBQ1IsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3JGLENBQUM7SUFDSixDQUFDO0NBQ0YifQ==