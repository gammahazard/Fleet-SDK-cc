import { _0n, isEmpty, isUndefined, sumBy, utxoSum } from "@fleet-sdk/common";
/**
 * Accumulative selection strategy accumulates inputs until the target
 * value is reached, skipping detrimental inputs.
 */
export class AccumulativeSelectionStrategy {
    _inputs;
    select(inputs, target) {
        this._inputs = inputs;
        let selection = [];
        if (!isEmpty(target.tokens)) {
            selection = this._selectTokens(target.tokens);
        }
        const selectedNanoErgs = sumBy(selection, (input) => input.value);
        if ((isUndefined(target.nanoErgs) && isEmpty(target.tokens)) ||
            (!isUndefined(target.nanoErgs) && selectedNanoErgs < target.nanoErgs)) {
            const targetAmount = !isUndefined(target.nanoErgs)
                ? target.nanoErgs - selectedNanoErgs
                : undefined;
            selection = selection.concat(this._select(targetAmount));
        }
        return selection;
    }
    _selectTokens(targets) {
        let selection = [];
        for (const target of targets) {
            const targetAmount = !isUndefined(target.amount)
                ? target.amount - utxoSum(selection, target.tokenId)
                : undefined;
            if (targetAmount && targetAmount <= _0n) {
                continue;
            }
            selection = selection.concat(this._select(targetAmount, target.tokenId));
        }
        return selection;
    }
    _select(target, tokenId) {
        let acc = _0n;
        let selection = [];
        if (isUndefined(target)) {
            if (tokenId) {
                selection = this._inputs.filter((x) => x.assets.some((asset) => asset.tokenId === tokenId));
            }
            else {
                selection = this._inputs;
            }
        }
        else {
            for (let i = 0; i < this._inputs.length && acc < target; i++) {
                if (tokenId) {
                    for (const token of this._inputs[i].assets) {
                        if (token.tokenId !== tokenId) {
                            continue;
                        }
                        acc += token.amount;
                        selection.push(this._inputs[i]);
                    }
                }
                else {
                    acc += this._inputs[i].value;
                    selection.push(this._inputs[i]);
                }
            }
        }
        if (!isEmpty(selection)) {
            this._inputs = this._inputs.filter((input) => !selection.includes(input));
        }
        return selection;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjdW11bGF0aXZlU2VsZWN0aW9uU3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYnVpbGRlci9zZWxlY3Rvci9zdHJhdGVnaWVzL2FjY3VtdWxhdGl2ZVNlbGVjdGlvblN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFJOUU7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLDZCQUE2QjtJQUNoQyxPQUFPLENBQWlCO0lBRWhDLE1BQU0sQ0FBQyxNQUFxQixFQUFFLE1BQXVCO1FBQ25ELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBRXRCLElBQUksU0FBUyxHQUFrQixFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDM0IsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQy9DO1FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEUsSUFDRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4RCxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQ3JFO1lBQ0EsTUFBTSxZQUFZLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztnQkFDaEQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcs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