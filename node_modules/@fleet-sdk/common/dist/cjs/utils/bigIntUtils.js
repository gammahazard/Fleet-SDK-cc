"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sumBy = exports.decimalize = exports.undecimalize = exports.ensureBigInt = void 0;
const arrayUtils_1 = require("./arrayUtils");
const bigIntLiterals_1 = require("./bigIntLiterals");
const objectUtils_1 = require("./objectUtils");
function ensureBigInt(number) {
    return typeof number === "bigint" ? number : BigInt(number);
}
exports.ensureBigInt = ensureBigInt;
function undecimalize(decimalStr, options) {
    if (!decimalStr) {
        return bigIntLiterals_1._0n;
    }
    options = typeof options == "number" ? { decimals: options } : options;
    if ((0, objectUtils_1.isUndefined)(options)) {
        options = {};
    }
    options.decimals = options.decimals || 0;
    options.decimalMark = options.decimalMark || ".";
    const fragments = decimalStr.split(options.decimalMark);
    if (fragments.length > 2) {
        throw new Error("Invalid numeric string.");
    }
    let [integer, decimal] = fragments;
    integer = _removeLeadingZeros(integer);
    const negative = integer.startsWith("-") ? "-" : "";
    if (!decimal) {
        decimal = "0".repeat(options.decimals);
    }
    else if (decimal.length < options.decimals) {
        decimal = decimal.padEnd(options.decimals, "0");
    }
    return BigInt(negative + _stripNonDigits(integer + decimal));
}
exports.undecimalize = undecimalize;
function _stripNonDigits(value) {
    return value.replace(/\D/g, "");
}
function decimalize(value, options) {
    value = ensureBigInt(value);
    if (!options) {
        return value.toString();
    }
    options = typeof options == "number" ? { decimals: options } : options;
    options.decimals = options.decimals || 0;
    options.decimalMark = options.decimalMark || ".";
    const pow = bigIntLiterals_1._10n ** BigInt(options.decimals);
    const integer = value / pow;
    const decimal = value - integer * pow;
    return _buildFormattedDecimal(integer.toString(10), decimal.toString(10), options);
}
exports.decimalize = decimalize;
function _buildFormattedDecimal(integer, decimal, options) {
    const integerPart = _addThousandMarks(integer, options.thousandMark);
    const decimalPart = _stripTrailingZeros(decimal.padStart(options.decimals, "0"));
    if (decimalPart) {
        return `${integerPart}${options.decimalMark}${decimalPart}`;
    }
    else {
        return integerPart;
    }
}
function _addThousandMarks(value, mark) {
    if (!mark) {
        return value;
    }
    return value.replace(/\B(?=(\d{3})+(?!\d))/g, mark);
}
function _stripTrailingZeros(value) {
    if (!value.endsWith("0")) {
        return value;
    }
    return value.replace(/\.?0+$/, "");
}
function _removeLeadingZeros(value) {
    if (!value.startsWith("0")) {
        return value;
    }
    return value.replace(/^0+\.?/, "");
}
function sumBy(collection, iteratee, condition) {
    let acc = bigIntLiterals_1._0n;
    if ((0, arrayUtils_1.isEmpty)(collection)) {
        return acc;
    }
    for (const item of collection) {
        if ((0, objectUtils_1.isUndefined)(condition) || condition(item)) {
            acc += iteratee(item);
        }
    }
    return acc;
}
exports.sumBy = sumBy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlnSW50VXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvYmlnSW50VXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNkNBQXVDO0FBQ3ZDLHFEQUE2QztBQUM3QywrQ0FBNEM7QUFJNUMsU0FBZ0IsWUFBWSxDQUFDLE1BQWtCO0lBQzdDLE9BQU8sT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRkQsb0NBRUM7QUFlRCxTQUFnQixZQUFZLENBQUMsVUFBa0IsRUFBRSxPQUFpQztJQUNoRixJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ2YsT0FBTyxvQkFBRyxDQUFDO0tBQ1o7SUFFRCxPQUFPLEdBQUcsT0FBTyxPQUFPLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQ3ZFLElBQUksSUFBQSx5QkFBVyxFQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3hCLE9BQU8sR0FBRyxFQUFFLENBQUM7S0FDZDtJQUVELE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUM7SUFDekMsT0FBTyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxJQUFJLEdBQUcsQ0FBQztJQUVqRCxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4RCxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztLQUM1QztJQUVELElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBQ25DLE9BQU8sR0FB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